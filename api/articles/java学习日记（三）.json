{"title":"java学习日记（三）","uid":"d5699d6d49d30002c1ad1fb9a0e1e98a","slug":"java学习日记（三）","date":"2023-03-16T11:06:56.000Z","updated":"2023-03-22T08:00:24.000Z","comments":true,"path":"api/articles/java学习日记（三）.json","keywords":null,"cover":[],"content":"<h1 id=\"内存\"><a href=\"#内存\" class=\"headerlink\" title=\"内存\"></a>内存</h1><p>栈内存：基本类型的变量、对象、对象的引用和方法调用（最常用的放在栈内存）</p>\n<ul>\n<li><code>String str1 = new String(&quot;hello&quot;);</code><br>字符串第一次生成时，先把hello放在字符串常量池的一个地址（在方法区里），hello包装成一个对象（在堆地址里的另一个地址），再赋给str1，所以str1是对象</li>\n<li><code>String str2 = &quot;hello&quot;;</code><br><code>String str3 = &quot;hello&quot;;</code><br>str2和str3是相等的字符串常量。在方法区里的字符串常量池里。</li>\n<li>equals方法判断两个字符串是不是相等，不管是对象还是常量</li>\n</ul>\n<ul>\n<li>int类型的默认初始值是0</li>\n</ul>\n<ul>\n<li>类体里只能有变量和方法，不能出现语句，除非用花括号括起来（就是一个语句块了）</li>\n</ul>\n<h1 id=\"面向对象特性\"><a href=\"#面向对象特性\" class=\"headerlink\" title=\"面向对象特性\"></a>面向对象特性</h1><h2 id=\"类\"><a href=\"#类\" class=\"headerlink\" title=\"类\"></a>类</h2><p>类是创建对象的模板，对象是类的实例</p>\n<p>类定义：  </p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">EmpInfo</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//变量</span>\n\t\t<span class=\"token class-name\">String</span> designation<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">String</span> department<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\t<span class=\"token comment\">//方法</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">+</span><span class=\"token string\">\" is \"</span><span class=\"token operator\">+</span> designation<span class=\"token operator\">+</span><span class=\"token string\">\" at \"</span><span class=\"token operator\">+</span>department<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://cdn.jsdelivr.net/gh/strange-id/img@master/202303221512654.png\"></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">[</span><span class=\"token keyword\">public</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">abstract</span><span class=\"token operator\">|</span><span class=\"token keyword\">final</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ClassName</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">extends</span> <span class=\"token class-name\">SuperClassName</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">implements</span> <span class=\"token class-name\">InterfaceNameList</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#123;</span> … <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ul>\n<li>方括号[]表示可有可无  </li>\n<li>abstract是一个抽象类，不能用它生成对象<br>final表示不能再派生子类  </li>\n<li>extends后是子类名字  </li>\n<li>implements后是接口，接口里只有方法名，一个类可以接多个接口，接口是用来规范行为的，说明这些类都有这样的特征</li>\n</ul>\n<h2 id=\"成员变量\"><a href=\"#成员变量\" class=\"headerlink\" title=\"成员变量\"></a>成员变量</h2><h2 id=\"成员方法\"><a href=\"#成员方法\" class=\"headerlink\" title=\"成员方法\"></a>成员方法</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">[</span><span class=\"token keyword\">public</span><span class=\"token operator\">|</span><span class=\"token keyword\">protected</span><span class=\"token operator\">|</span><span class=\"token keyword\">private</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">static</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">abstract</span><span class=\"token operator\">|</span><span class=\"token keyword\">final</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">native</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">synchronized</span><span class=\"token punctuation\">]</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>return_type<span class=\"token punctuation\">></span></span> methodName <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>argument_list<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">throws</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>exception_list<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#123;</span> … <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ul>\n<li>static：类本身固有的</li>\n<li>return type：返回类型（void等）</li>\n<li>argument_list：可能的列表</li>\n<li>throws语句：如果发生异常丢给调用者处理</li>\n</ul>\n<p>方法是传值的，方法调用不会改变参数的值。即调用时参数传递给方法，就是赋值的过程。当对象作为参数时，参数的值是该对象的引用，这时对象的内容可以在方法中改变，但是对象的引用不会改变。</p>\n<h3 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PassTest</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">float</span> ptValue<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// 参数类型是基本类型</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">changeInt</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\tvalue <span class=\"token operator\">=</span> <span class=\"token number\">55</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token comment\">// 参数类型是引用型，并且方法中改了变参数的值</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">changeStr</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\tvalue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"different\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">changeStrBuild</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StringBuilder</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token comment\">// value = new StringBuilder(\"different\");</span>\n\t\tvalue<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" world!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token comment\">// 参数类型是引用型，并且方法中改了变参数所指向对象的成员变量值</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">changeObjValue</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PassTest</span> ref<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\tref<span class=\"token punctuation\">.</span>ptValue <span class=\"token operator\">=</span> <span class=\"token number\">99.0f</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> args<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token class-name\">String</span> str<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">StringBuilder</span> strB<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">int</span> val<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">PassTest</span> pt <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PassTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 创建PassTest的对象</span>\n\t\t<span class=\"token comment\">// 测试基本类型参数的传递，观察调用程序中的变量值是否改变</span>\n\t\tval <span class=\"token operator\">=</span> <span class=\"token number\">11</span><span class=\"token punctuation\">;</span>\n\t\tpt<span class=\"token punctuation\">.</span><span class=\"token function\">changeInt</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Int value is: \"</span> <span class=\"token operator\">+</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">// 测试引用类型参数的传递，观察调用程序中的变量值是否改变</span>\n\t\tstr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 值是hello的字符串对象</span>\n\t\tpt<span class=\"token punctuation\">.</span><span class=\"token function\">changeStr</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 把hello改成different</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Str value is: \"</span> <span class=\"token operator\">+</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\tstrB <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tpt<span class=\"token punctuation\">.</span><span class=\"token function\">changeStrBuild</span><span class=\"token punctuation\">(</span>strB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Str value is: \"</span> <span class=\"token operator\">+</span> strB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">// 测试引用类型参数的传递，观察调用程序中的变量值是否改变</span>\n\t\tpt<span class=\"token punctuation\">.</span>ptValue <span class=\"token operator\">=</span> <span class=\"token number\">101.0f</span><span class=\"token punctuation\">;</span>\n\t\tpt<span class=\"token punctuation\">.</span><span class=\"token function\">changeObjValue</span><span class=\"token punctuation\">(</span>pt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Pt value is: \"</span> <span class=\"token operator\">+</span> pt<span class=\"token punctuation\">.</span>ptValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>运行结果</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Int</span> value is<span class=\"token operator\">:</span> <span class=\"token number\">11</span>\n<span class=\"token class-name\">Str</span> value is<span class=\"token operator\">:</span> <span class=\"token class-name\">Hello</span>\n<span class=\"token class-name\">Str</span> value is<span class=\"token operator\">:</span> <span class=\"token class-name\">Hello</span> world<span class=\"token operator\">!</span>\n<span class=\"token class-name\">Pt</span> value is<span class=\"token operator\">:</span> <span class=\"token number\">99.0</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n","text":"内存栈内存：基本类型的变量、对象、对象的引用和方法调用（最常用的放在栈内存） String str1 = new String(&quot;hello&quot;);字符串第一次生成时，先把hello放在字符串常量池的一个地址（在方法区里），hello包装成一个对象（在堆地址里的...","link":"","photos":[],"count_time":{"symbolsCount":"2.4k","symbolsTime":"2 mins."},"categories":[{"name":"学习记录","slug":"学习记录","count":11,"path":"api/categories/学习记录.json"}],"tags":[{"name":"java","slug":"java","count":3,"path":"api/tags/java.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%86%85%E5%AD%98\"><span class=\"toc-text\">内存</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%89%B9%E6%80%A7\"><span class=\"toc-text\">面向对象特性</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%B1%BB\"><span class=\"toc-text\">类</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">成员变量</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%88%90%E5%91%98%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">成员方法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BE%8B%E5%AD%90\"><span class=\"toc-text\">例子</span></a></li></ol></li></ol></li></ol>","author":{"name":"这id好怪","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/strange-id/img@master/202302261337546.png","link":"/","description":"记录学业、生活、爱好","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"试用Typst写论文","uid":"05ebd5f15e659c574379bf100a0f2633","slug":"试用Typst写论文","date":"2023-04-07T07:46:51.000Z","updated":"2023-04-07T08:34:58.000Z","comments":true,"path":"api/articles/试用Typst写论文.json","keywords":null,"cover":"https://cdn.jsdelivr.net/gh/strange-id/img@master/202304071552813.png","text":"Typst是什么写论文的，比markdown强大，比latex简单。我来试试 论文模板来源QQ空间里看到的华科论文模板：github链接 感谢这位大佬校友 问题记录import#import &quot;template.typ&quot;: * 冒号后面的星号很重要，如果没有的...","link":"","photos":[],"count_time":{"symbolsCount":176,"symbolsTime":"1 mins."},"categories":[{"name":"学习记录","slug":"学习记录","count":11,"path":"api/categories/学习记录.json"}],"tags":[{"name":"小技巧","slug":"小技巧","count":8,"path":"api/tags/小技巧.json"},{"name":"Typst","slug":"Typst","count":1,"path":"api/tags/Typst.json"}],"author":{"name":"这id好怪","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/strange-id/img@master/202302261337546.png","link":"/","description":"记录学业、生活、爱好","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"配置python环境记录","uid":"4c015323badf12ef8162ba8dcf2498a3","slug":"配置python环境记录","date":"2023-03-08T08:34:44.000Z","updated":"2023-03-16T12:10:52.000Z","comments":true,"path":"api/articles/配置python环境记录.json","keywords":null,"cover":[],"text":"问题描述学姐给的代码打开发现要torch软件包，用pycharm的设置下载不了。原来是要pytorch，赶紧用pip下载，发现命令行没有pip！连python3都没有！ 没设置环境变量 cmd 输入python弹出微软商店 解决方法是把环境变量上移到微软的前面 还是没有pip，不...","link":"","photos":[],"count_time":{"symbolsCount":905,"symbolsTime":"1 mins."},"categories":[{"name":"学习记录","slug":"学习记录","count":11,"path":"api/categories/学习记录.json"}],"tags":[{"name":"小技巧","slug":"小技巧","count":8,"path":"api/tags/小技巧.json"},{"name":"python","slug":"python","count":1,"path":"api/tags/python.json"}],"author":{"name":"这id好怪","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/strange-id/img@master/202302261337546.png","link":"/","description":"记录学业、生活、爱好","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}