{"title":"基于Cartpole-V1环境的PPO算法测试（二）","uid":"c9c4367659589c155ad018aba731abf7","slug":"基于Cartpole-V1环境的PPO算法测试（二）","date":"2023-03-01T08:36:13.000Z","updated":"2023-03-01T09:05:50.000Z","comments":true,"path":"api/articles/基于Cartpole-V1环境的PPO算法测试（二）.json","keywords":null,"cover":"https://cdn.jsdelivr.net/gh/strange-id/img@master/202303011641323.png","content":"<h1 id=\"摘要\"><a href=\"#摘要\" class=\"headerlink\" title=\"摘要\"></a>摘要</h1><p>昨天看到了倒立摆，今天用PPO训练了倒立摆，明天的目标是让训练结果可视化。</p>\n<p><a href=\"https://blog.csdn.net/weixin_43292547/article/details/120254497\">代码来源</a></p>\n<p>该代码和我的环境不一样，所以有几个小问题。</p>\n<h1 id=\"代码环境（重要）\"><a href=\"#代码环境（重要）\" class=\"headerlink\" title=\"代码环境（重要）\"></a>代码环境（重要）</h1><table>\n<thead>\n<tr>\n<th align=\"center\">包</th>\n<th align=\"center\">版本号</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">python</td>\n<td align=\"center\">3.11</td>\n</tr>\n<tr>\n<td align=\"center\">gym</td>\n<td align=\"center\">0.26.2</td>\n</tr>\n<tr>\n<td align=\"center\">numpy</td>\n<td align=\"center\">1.23.5</td>\n</tr>\n<tr>\n<td align=\"center\">keras</td>\n<td align=\"center\">2.12.0rc1</td>\n</tr>\n<tr>\n<td align=\"center\">tensonflow</td>\n<td align=\"center\">2.12.0rc0</td>\n</tr>\n</tbody></table>\n<h1 id=\"问题及解决方法\"><a href=\"#问题及解决方法\" class=\"headerlink\" title=\"问题及解决方法\"></a>问题及解决方法</h1><h2 id=\"1-env-seed-1\"><a href=\"#1-env-seed-1\" class=\"headerlink\" title=\"1. env.seed(1)\"></a>1. <code>env.seed(1)</code></h2><p>这个函数好像已经没了！解决方案暂时没有去找。因为今天还不涉及调参数，每次训练的初始环境也无所谓吧？就算调也无所谓吧？</p>\n<h2 id=\"2-env-action-space-n\"><a href=\"#2-env-action-space-n\" class=\"headerlink\" title=\"2. env.action_space.n\"></a>2. <code>env.action_space.n</code></h2><p>这个<code>.n</code>好像也没了，但是不报错只警告，无视。</p>\n<h2 id=\"3-s-s-np-newaxis\"><a href=\"#3-s-s-np-newaxis\" class=\"headerlink\" title=\"3. s = s[np.newaxis, :]\"></a>3. <code>s = s[np.newaxis, :]</code></h2><p>这句话的意思是在s基础上再加一维，原代码的s应该是一个一维数组，但是现在它是一个一维数组加一个空字典（？）</p>\n<p>总之就是会报错，不能在一个元组里再加元组：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token builtin\">tuple</span> indices must be integers <span class=\"token keyword\">or</span> slices<span class=\"token punctuation\">,</span> <span class=\"token keyword\">not</span> <span class=\"token builtin\">tuple</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>解决方法：</p>\n<p>原代码：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">s <span class=\"token operator\">=</span> env<span class=\"token punctuation\">.</span>reset<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>更改为：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">s <span class=\"token operator\">=</span> env<span class=\"token punctuation\">.</span>reset<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">#只要前面的一维数组就好了</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"成功运行！\"><a href=\"#成功运行！\" class=\"headerlink\" title=\"成功运行！\"></a>成功运行！</h2><p><img src=\"https://cdn.jsdelivr.net/gh/strange-id/img@master/202303011641323.png\"></p>\n<h2 id=\"附上代码（更改后）\"><a href=\"#附上代码（更改后）\" class=\"headerlink\" title=\"附上代码（更改后）\"></a>附上代码（更改后）</h2><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> tensorflow <span class=\"token keyword\">as</span> tf\n<span class=\"token keyword\">from</span> tensorflow <span class=\"token keyword\">import</span> keras\n<span class=\"token keyword\">from</span> keras<span class=\"token punctuation\">.</span>layers <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\n<span class=\"token keyword\">import</span> gym\n\nnp<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>seed<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\ntf<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>set_seed<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\nEP_MAX <span class=\"token operator\">=</span> <span class=\"token number\">1000</span>\nEP_LEN <span class=\"token operator\">=</span> <span class=\"token number\">500</span>\n\nGAMMA <span class=\"token operator\">=</span> <span class=\"token number\">0.9</span>  <span class=\"token comment\"># reward discount factor</span>\nA_LR <span class=\"token operator\">=</span> <span class=\"token number\">0.0001</span>  <span class=\"token comment\"># learning rate for actor actor的学习率</span>\nC_LR <span class=\"token operator\">=</span> <span class=\"token number\">0.0001</span>  <span class=\"token comment\"># learning rate for critic</span>\nUPDATE_STEP <span class=\"token operator\">=</span> <span class=\"token number\">15</span>  <span class=\"token comment\"># loop update operation n-steps</span>\nEPSILON <span class=\"token operator\">=</span> <span class=\"token number\">0.2</span>  <span class=\"token comment\"># for clipping surrogate objective</span>\nGAME <span class=\"token operator\">=</span> <span class=\"token string\">'CartPole-v1'</span>    <span class=\"token comment\">#游戏名</span>\n\nenv <span class=\"token operator\">=</span> gym<span class=\"token punctuation\">.</span>make<span class=\"token punctuation\">(</span>GAME<span class=\"token punctuation\">,</span> render_mode<span class=\"token operator\">=</span><span class=\"token string\">\"human\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#env.seed(1) #没这个函数了</span>\nS_DIM <span class=\"token operator\">=</span> env<span class=\"token punctuation\">.</span>observation_space<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\nA_DIM <span class=\"token operator\">=</span> env<span class=\"token punctuation\">.</span>action_space<span class=\"token punctuation\">.</span>n\n<span class=\"token comment\">#print(S_DIM, A_DIM) #4，2。说明观测空间是个4维向量，动作是2维的（向左0，向右1）</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">PPO</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>opt_a <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>optimizers<span class=\"token punctuation\">.</span>Adam<span class=\"token punctuation\">(</span>A_LR<span class=\"token punctuation\">)</span> <span class=\"token comment\">#计算梯度下降的亚当算法</span>\n        self<span class=\"token punctuation\">.</span>opt_c <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>optimizers<span class=\"token punctuation\">.</span>Adam<span class=\"token punctuation\">(</span>C_LR<span class=\"token punctuation\">)</span> <span class=\"token comment\">#AC网络</span>\n\n        self<span class=\"token punctuation\">.</span>model_a <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>_build_anet<span class=\"token punctuation\">(</span>trainable<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#可训练</span>\n        self<span class=\"token punctuation\">.</span>model_a_old <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>_build_anet<span class=\"token punctuation\">(</span>trainable<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#不可训练</span>\n        self<span class=\"token punctuation\">.</span>model_c <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>_build_cnet<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">_build_anet</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> trainable<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\">#建立A网络</span>\n        tfs_a <span class=\"token operator\">=</span> Input<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>S_DIM<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">)</span>    <span class=\"token comment\">#输入层</span>\n        l1 <span class=\"token operator\">=</span> Dense<span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'relu'</span><span class=\"token punctuation\">,</span> trainable<span class=\"token operator\">=</span>trainable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>tfs_a<span class=\"token punctuation\">)</span> <span class=\"token comment\">#全连接层 'relu'是激活函数</span>\n        a_prob <span class=\"token operator\">=</span> Dense<span class=\"token punctuation\">(</span>A_DIM<span class=\"token punctuation\">,</span> <span class=\"token string\">'softmax'</span><span class=\"token punctuation\">,</span> trainable<span class=\"token operator\">=</span>trainable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>l1<span class=\"token punctuation\">)</span>\n        model_a <span class=\"token operator\">=</span> keras<span class=\"token punctuation\">.</span>models<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">(</span>inputs<span class=\"token operator\">=</span>tfs_a<span class=\"token punctuation\">,</span> outputs<span class=\"token operator\">=</span>a_prob<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> model_a\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">_build_cnet</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\">#建立C网络</span>\n        tfs_c <span class=\"token operator\">=</span> Input<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>S_DIM<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">)</span>\n        l1 <span class=\"token operator\">=</span> Dense<span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'relu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>tfs_c<span class=\"token punctuation\">)</span>\n        v <span class=\"token operator\">=</span> Dense<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>l1<span class=\"token punctuation\">)</span>\n        model_c <span class=\"token operator\">=</span> keras<span class=\"token punctuation\">.</span>models<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">(</span>inputs<span class=\"token operator\">=</span>tfs_c<span class=\"token punctuation\">,</span> outputs<span class=\"token operator\">=</span>v<span class=\"token punctuation\">)</span>\n        model_c<span class=\"token punctuation\">.</span><span class=\"token builtin\">compile</span><span class=\"token punctuation\">(</span>optimizer<span class=\"token operator\">=</span>self<span class=\"token punctuation\">.</span>opt_c<span class=\"token punctuation\">,</span> loss<span class=\"token operator\">=</span><span class=\"token string\">'mse'</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">#model.compile(optimizer = 优化器，loss = 损失函数，metrics = [\"准确率”])</span>\n        <span class=\"token keyword\">return</span> model_c\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>model_a_old<span class=\"token punctuation\">.</span>set_weights<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>model_a<span class=\"token punctuation\">.</span>get_weights<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\">#设置权重</span>\n        v <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>get_v<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n        adv <span class=\"token operator\">=</span> r <span class=\"token operator\">-</span> v\n        oldpi <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>model_a_old<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>UPDATE_STEP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">with</span> tf<span class=\"token punctuation\">.</span>GradientTape<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> tape<span class=\"token punctuation\">:</span>\n                pi <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>model_a<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n                <span class=\"token comment\"># xx=tf.shape(a)[0]</span>\n                <span class=\"token comment\"># xxx=tf.range(xx, dtype=tf.int32)</span>\n                a_indices <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>stack<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>tf<span class=\"token punctuation\">.</span><span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>tf<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dtype<span class=\"token operator\">=</span>tf<span class=\"token punctuation\">.</span>int32<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n                pi_prob <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>gather_nd<span class=\"token punctuation\">(</span>params<span class=\"token operator\">=</span>pi<span class=\"token punctuation\">,</span> indices<span class=\"token operator\">=</span>a_indices<span class=\"token punctuation\">)</span>\n                oldpi_prob <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>gather_nd<span class=\"token punctuation\">(</span>params<span class=\"token operator\">=</span>oldpi<span class=\"token punctuation\">,</span> indices<span class=\"token operator\">=</span>a_indices<span class=\"token punctuation\">)</span>\n\n                ratio <span class=\"token operator\">=</span> pi_prob <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span>oldpi_prob <span class=\"token operator\">+</span> <span class=\"token number\">1e-5</span><span class=\"token punctuation\">)</span>\n                surr <span class=\"token operator\">=</span> ratio <span class=\"token operator\">*</span> adv\n                x2 <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>clip_by_value<span class=\"token punctuation\">(</span>ratio<span class=\"token punctuation\">,</span> <span class=\"token number\">1.</span> <span class=\"token operator\">-</span> EPSILON<span class=\"token punctuation\">,</span> <span class=\"token number\">1.</span> <span class=\"token operator\">+</span> EPSILON<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> adv\n                x3 <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>minimum<span class=\"token punctuation\">(</span>surr<span class=\"token punctuation\">,</span> x2<span class=\"token punctuation\">)</span>\n                aloss <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>tf<span class=\"token punctuation\">.</span>reduce_mean<span class=\"token punctuation\">(</span>x3<span class=\"token punctuation\">)</span>\n\n            a_grads <span class=\"token operator\">=</span> tape<span class=\"token punctuation\">.</span>gradient<span class=\"token punctuation\">(</span>aloss<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>model_a<span class=\"token punctuation\">.</span>trainable_weights<span class=\"token punctuation\">)</span>\n            a_grads_and_vars <span class=\"token operator\">=</span> <span class=\"token builtin\">zip</span><span class=\"token punctuation\">(</span>a_grads<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>model_a<span class=\"token punctuation\">.</span>trainable_weights<span class=\"token punctuation\">)</span>\n            self<span class=\"token punctuation\">.</span>opt_a<span class=\"token punctuation\">.</span>apply_gradients<span class=\"token punctuation\">(</span>a_grads_and_vars<span class=\"token punctuation\">)</span>\n\n        self<span class=\"token punctuation\">.</span>model_c<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">,</span> verbose<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> shuffle<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span>epochs<span class=\"token operator\">=</span>UPDATE_STEP<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">choose_action</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        s <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span>np<span class=\"token punctuation\">.</span>newaxis<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>    <span class=\"token comment\">#这里一开始报错了，因为env.reset()返回的不是一个一维数组，而是一个二维的元组。报错：元组里不能套元组（？），解决方案是不要后面的那个空元组</span>\n        prob_weights <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>model_a<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>numpy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        action <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>choice<span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>prob_weights<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> p<span class=\"token operator\">=</span>prob_weights<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> action\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get_v</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#</span>\n        s <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> S_DIM<span class=\"token punctuation\">)</span>    <span class=\"token comment\">#把s变成一个列数为S_DIM，行数需要计算的矩阵</span>\n        v <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>model_c<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> v\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    ppo <span class=\"token operator\">=</span> PPO<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    GLOBAL_EP <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    GLOBAL_RUNNING_R <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    render <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>\n    <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>EP_MAX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        s <span class=\"token operator\">=</span> env<span class=\"token punctuation\">.</span>reset<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\">#这里原先是“s = env.reset()”，会报错，加上[0]就好了</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n        ep_r <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n        buffer_s<span class=\"token punctuation\">,</span> buffer_a<span class=\"token punctuation\">,</span> buffer_r <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\"># clear history buffer, use new policy to collect data</span>\n        <span class=\"token keyword\">for</span> t <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>EP_LEN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> render<span class=\"token punctuation\">:</span> env<span class=\"token punctuation\">.</span>render<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            a <span class=\"token operator\">=</span> ppo<span class=\"token punctuation\">.</span>choose_action<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n            s_<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">,</span> done<span class=\"token punctuation\">,</span> _ <span class=\"token punctuation\">,</span> _ <span class=\"token operator\">=</span> env<span class=\"token punctuation\">.</span>step<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>  <span class=\"token comment\">#step要返回5个参数？observation, reward, terminated, truncated, info = env.step(action)？</span>\n            <span class=\"token keyword\">if</span> done<span class=\"token punctuation\">:</span> r <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">10</span>\n            buffer_s<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n            buffer_a<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n            buffer_r<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>r <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 0 for not down, -11 for down. Reward engineering</span>\n            s <span class=\"token operator\">=</span> s_\n            ep_r <span class=\"token operator\">+=</span> r\n\n            <span class=\"token keyword\">if</span> t <span class=\"token operator\">==</span> EP_LEN <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token keyword\">or</span> done<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">if</span> done<span class=\"token punctuation\">:</span>\n                    v_s_ <span class=\"token operator\">=</span> <span class=\"token number\">0</span>  <span class=\"token comment\"># end of episode</span>\n                <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                    v_s_ <span class=\"token operator\">=</span> ppo<span class=\"token punctuation\">.</span>get_v<span class=\"token punctuation\">(</span>s_<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n\n                discounted_r <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\"># compute discounted reward</span>\n                <span class=\"token keyword\">for</span> r <span class=\"token keyword\">in</span> buffer_r<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                    v_s_ <span class=\"token operator\">=</span> r <span class=\"token operator\">+</span> GAMMA <span class=\"token operator\">*</span> v_s_\n                    discounted_r<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>v_s_<span class=\"token punctuation\">)</span>\n                discounted_r<span class=\"token punctuation\">.</span>reverse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n                bs<span class=\"token punctuation\">,</span> ba<span class=\"token punctuation\">,</span> br <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>vstack<span class=\"token punctuation\">(</span>buffer_s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>vstack<span class=\"token punctuation\">(</span>buffer_a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>ravel<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span>discounted_r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">]</span>\n                ppo<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span>bs<span class=\"token punctuation\">,</span> ba<span class=\"token punctuation\">,</span> br<span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">break</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>GLOBAL_RUNNING_R<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            GLOBAL_RUNNING_R<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>ep_r<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            GLOBAL_RUNNING_R<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>GLOBAL_RUNNING_R<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token number\">0.9</span> <span class=\"token operator\">+</span> ep_r <span class=\"token operator\">*</span> <span class=\"token number\">0.1</span><span class=\"token punctuation\">)</span>\n        GLOBAL_EP <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>GLOBAL_EP<span class=\"token punctuation\">,</span> <span class=\"token string\">'|Ep_r: %.2f'</span> <span class=\"token operator\">%</span> ep_r<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> ep_r <span class=\"token operator\">></span> <span class=\"token number\">180</span><span class=\"token punctuation\">:</span> render <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>","text":"摘要昨天看到了倒立摆，今天用PPO训练了倒立摆，明天的目标是让训练结果可视化。 代码来源 该代码和我的环境不一样，所以有几个小问题。 代码环境（重要） 包 版本号 python 3.11 gym 0.26.2 numpy 1.23.5 keras 2.12.0rc1 tenson...","link":"","photos":[],"count_time":{"symbolsCount":"5.4k","symbolsTime":"5 mins."},"categories":[{"name":"学习记录","slug":"学习记录","count":11,"path":"api/categories/学习记录.json"}],"tags":[{"name":"强化学习","slug":"强化学习","count":2,"path":"api/tags/强化学习.json"},{"name":"PPO","slug":"PPO","count":2,"path":"api/tags/PPO.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%91%98%E8%A6%81\"><span class=\"toc-text\">摘要</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%A0%81%E7%8E%AF%E5%A2%83%EF%BC%88%E9%87%8D%E8%A6%81%EF%BC%89\"><span class=\"toc-text\">代码环境（重要）</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">问题及解决方法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-env-seed-1\"><span class=\"toc-text\">1. env.seed(1)</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-env-action-space-n\"><span class=\"toc-text\">2. env.action_space.n</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-s-s-np-newaxis\"><span class=\"toc-text\">3. s &#x3D; s[np.newaxis, :]</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%88%90%E5%8A%9F%E8%BF%90%E8%A1%8C%EF%BC%81\"><span class=\"toc-text\">成功运行！</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%99%84%E4%B8%8A%E4%BB%A3%E7%A0%81%EF%BC%88%E6%9B%B4%E6%94%B9%E5%90%8E%EF%BC%89\"><span class=\"toc-text\">附上代码（更改后）</span></a></li></ol></li></ol>","author":{"name":"这id好怪","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/strange-id/img@master/202302261337546.png","link":"/","description":"记录学业、生活、爱好","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"java学习日记（二）","uid":"ac12acbbc0c5c288b187cdd139d1f144","slug":"java学习日记（二）","date":"2023-03-01T12:27:39.000Z","updated":"2023-03-16T11:07:48.000Z","comments":true,"path":"api/articles/java学习日记（二）.json","keywords":null,"cover":[],"text":"面向对象的编程思想面向过程编程是数据结构和算法分开的，直接上手编算法解决问题。 面向对象编程是先把问题抽象成对象，对象中有它的特点（数据结构）和解决方法（算法），数据结构和算法杂糅在一起处理。 类、继承java中的Object类： 是最顶级的类，所有其他的类都是它直接或间接的子类...","link":"","photos":[],"count_time":{"symbolsCount":"2.4k","symbolsTime":"2 mins."},"categories":[{"name":"学习记录","slug":"学习记录","count":11,"path":"api/categories/学习记录.json"}],"tags":[{"name":"java","slug":"java","count":3,"path":"api/tags/java.json"}],"author":{"name":"这id好怪","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/strange-id/img@master/202302261337546.png","link":"/","description":"记录学业、生活、爱好","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"基于Cartpole-V1环境的PPO算法测试（一）","uid":"12987721cc33fd056d0c65501beff720","slug":"基于Cartpole-V1环境的PPO算法测试（一）","date":"2023-02-28T02:29:37.000Z","updated":"2023-02-28T05:16:12.000Z","comments":true,"path":"api/articles/基于Cartpole-V1环境的PPO算法测试（一）.json","keywords":null,"cover":"https://cdn.jsdelivr.net/gh/strange-id/img@master/202302281031890.png","text":"摘要学长说要用CartPole练练手，找找调参的感觉。现在感觉毕设好像真的做不完了。 建立环境网上很多教程都是CartPole-V0相关的，但是gym更新了V1，教程很少，bug很多。 首先安装gym工具包： pip install gym V0的代码： import gym #...","link":"","photos":[],"count_time":{"symbolsCount":843,"symbolsTime":"1 mins."},"categories":[{"name":"学习记录","slug":"学习记录","count":11,"path":"api/categories/学习记录.json"}],"tags":[{"name":"强化学习","slug":"强化学习","count":2,"path":"api/tags/强化学习.json"},{"name":"PPO","slug":"PPO","count":2,"path":"api/tags/PPO.json"}],"author":{"name":"这id好怪","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/strange-id/img@master/202302261337546.png","link":"/","description":"记录学业、生活、爱好","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}