<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title></title>
  
  
  <link href="http://strange-id.github.io/atom.xml" rel="self"/>
  
  <link href="http://strange-id.github.io/"/>
  <updated>2023-07-18T12:20:36.465Z</updated>
  <id>http://strange-id.github.io/</id>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>周报#0：洗牙、理发、混日子</title>
    <link href="http://strange-id.github.io/post/%E5%91%A8%E6%8A%A5#0%EF%BC%9A%E6%B4%97%E7%89%99%E3%80%81%E7%90%86%E5%8F%91%E3%80%81%E6%B7%B7%E6%97%A5%E5%AD%90.html"/>
    <id>http://strange-id.github.io/post/%E5%91%A8%E6%8A%A5#0%EF%BC%9A%E6%B4%97%E7%89%99%E3%80%81%E7%90%86%E5%8F%91%E3%80%81%E6%B7%B7%E6%97%A5%E5%AD%90.html</id>
    <published>2023-07-18T11:05:55.000Z</published>
    <updated>2023-07-18T12:20:36.465Z</updated>
    
    <content type="html"><![CDATA[<p>2023年7月18日，惊觉自己的博客已经很久没更新，反思了一下，主要原因是总觉得别人的博客都是技术型，自己又没什么技术可以分享记录，没得写。但好不容易搭起来的博客，也不能这么荒废了。于是再次上网寻找别人的优秀博客企图找到技术型博客以外的思路，这次看到了一位技术大佬的博客，他不仅分享技术，还写周报分享自己的生活感受，我眼前一亮，学！决定模仿大佬，从今开始每周写一篇周报。没有技术分享，就当是日记本吧！</p><p>本篇周报是#0，是写作日期的上一周的总结。写作是一个下限很低，上限很高的技能，由于高中毕业后再也没有写作的必要，我的写作技能一次次突破新的下限，希望通过每周的周报，拾回一些说人话的能力。</p><h1 id="初次洗牙"><a href="#初次洗牙" class="headerlink" title="初次洗牙"></a>初次洗牙</h1><p>几个月前闲来无事抠牙缝，在正中间的下牙内侧抠出一块牙结石，当时还不知道这是牙结石，是后来查小红书才知道的。从那时起就有去洗个牙的想法，可行动力不足，一拖再拖。</p><p>在江西旅游期间问了M姓好友，得知武汉小诊所的洗牙服务若是在美团上团购仅需八九十块，震惊于如此便宜的价格，因为我记得妈妈多年前洗牙的价钱是200多，价格差这么多，让我担忧小诊所的卫生条件，决定趁毕业前赶紧在校医院洗牙，至少它是正规医院，放心。从江西回来后立刻去校医院咨询，结果得知需要预约，现在预约要排到一个月后，到时我早就毕业，遗憾离场！说到底还是拖延症作祟，有什么想法就应该立刻执行。</p><p>无奈回家，和妈妈商量，她说有同事前几天刚向她推荐了一家诊所，洗牙过程一点也不痛苦，大力推荐。我等妈妈放假后提出要求要去，第二天就去了，我妈的行动力啊，值得我大力学习。</p><p>洗牙过程很快，效果很好，一个人花费288，走了我妈医保。因为我牙很健康，所以以后再长牙结石的时候再来就行，我妈的牙结石太多，牙龈也萎缩了，她需要每年洗一次牙。总体来说体验很好！</p><h1 id="理发"><a href="#理发" class="headerlink" title="理发"></a>理发</h1><p>张家口的夏天我还是吹牛吹早了，清凉夏日仅存在于我儿时的记忆里，这些年河北一年比一年热，张家口有的时候下午也得开空调。脑后的长发像动物皮毛保暖效果拉满，遂决定去理发。</p><p>与父母同行到理发店，这家店从我搬来附近就存在了，门脸、布局、理发师没有一点改变，唯一变的是这些年慢慢涨价，但削薄头发也才涨到25，还要什么自行车？</p><p>店里有两个老人顾客，我妈进来看了一眼，说先去附近拿你的裤子吧，待会回来。</p><p>裁缝店在隔壁小区里，是一位老太太自己家，她也是在我搬来附近时就在这里当裁缝了，这个小区的布局也没有任何改变，扫过一眼就能唤醒我不少回忆。唯一改变的是老太太更耳背了，我爸说上次拼命砸她的门她才听到，于是这次我们也砸门，不过好像没人在。</p><p>我回去理发，这时只剩一个老人和理发师，老人正要离开，轮到我洗头。理发师问我是不是放假了，我就搭茬，因为她每个假期都这样问我，不过我这次是失业回来的。旁边的老人也加入了闲聊，她说真快啊，你都大学毕业了，上次见你你还是小学生，你长相一点也没变。我估计她是认识我妈，问了一下果然是。没说两句，她走了。轮到我理发。</p><p>理完发凉快多了！走出门看到爸妈正在骂他那个赌博的儿子，我说刚才那人认识你，我妈说她是当年小饭桌租的房附近的热心大姐，没有她的帮助，小饭桌会遭到更多邻居的抵制。谢谢大姐。</p><p>这条街上的房屋看起来真的很矮很旧，是我长高了，是我爸妈变老了。</p><h1 id="混日子"><a href="#混日子" class="headerlink" title="混日子"></a>混日子</h1><p>能不学习就找借口不学习，想玩游戏又不好意思玩游戏，能考上哈工大就有鬼。</p><p>洗！心！革！面！</p><p>但是7月22号要去旅游喽！超期待天津的二姑包子，还在犹豫要不要和告诉长沙同学我要去长沙，好像真不熟。</p><p>本周的体重竟然没有变化，可能也是好事。回家减的这点重量可能一顿包子就吃回去了，还是要坚持健身环。回家以后健身环好像就没怎么断过，夸夸自己！</p><h1 id="广阔天空光之美少女"><a href="#广阔天空光之美少女" class="headerlink" title="广阔天空光之美少女"></a>广阔天空光之美少女</h1><p>本来好几周没追了，看到一张23话的真白小姐截图，火速追平进度。23话真是我看的为数不多的光美中最棒的一集，节奏也好，糖也好吃。</p><p>真白小姐是我最喜欢的Q娃，我觉得她不只是温柔塑造的好，她也不是大家说的传统的吐槽役，她的吐槽不是夸张的ツッコミ，是一种更加……更加说到我心坎里的东西。吐槽的更精确？更接地气？好像她就是我身边的一个同学一个朋友，好像她就是我，她精确地说出了我的心里话，这是在中日文化隔阂的背景下很难有的体验。</p><p>马西楼小姐我爱你。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;2023年7月18日，惊觉自己的博客已经很久没更新，反思了一下，主要原因是总觉得别人的博客都是技术型，自己又没什么技术可以分享记录，没得写。但好不容易搭起来的博客，也不能这么荒废了。于是再次上网寻找别人的优秀博客企图找到技术型博客以外的思路，这次看到了一位技术大佬的博客，他</summary>
      
    
    
    
    <category term="日常随记" scheme="http://strange-id.github.io/categories/%E6%97%A5%E5%B8%B8%E9%9A%8F%E8%AE%B0/"/>
    
    
    <category term="周报" scheme="http://strange-id.github.io/tags/%E5%91%A8%E6%8A%A5/"/>
    
  </entry>
  
  <entry>
    <title>微软商店打不开代码:0x80131500</title>
    <link href="http://strange-id.github.io/post/%E5%BE%AE%E8%BD%AF%E5%95%86%E5%BA%97%E6%89%93%E4%B8%8D%E5%BC%80%E4%BB%A3%E7%A0%81-0x80131500.html"/>
    <id>http://strange-id.github.io/post/%E5%BE%AE%E8%BD%AF%E5%95%86%E5%BA%97%E6%89%93%E4%B8%8D%E5%BC%80%E4%BB%A3%E7%A0%81-0x80131500.html</id>
    <published>2023-04-08T04:34:22.000Z</published>
    <updated>2023-04-08T04:39:06.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>win11系统，昨天好好的，今天上不了，XBOX也登陆不了。</p><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>在“网络和internet”-&gt;高级网络设置-&gt;“数据使用量”中把WiFi流量上限改成无限制。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h1&gt;&lt;p&gt;win11系统，昨天好好的，今天上不了，XBOX也登陆不了。&lt;/p&gt;
&lt;h1 id=&quot;解决方法&quot;&gt;&lt;a href=&quot;#解决方</summary>
      
    
    
    
    <category term="学习记录" scheme="http://strange-id.github.io/categories/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="小技巧" scheme="http://strange-id.github.io/tags/%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>如龙0 通关感想</title>
    <link href="http://strange-id.github.io/post/%E5%A6%82%E9%BE%990-%E9%80%9A%E5%85%B3%E6%84%9F%E6%83%B3.html"/>
    <id>http://strange-id.github.io/post/%E5%A6%82%E9%BE%990-%E9%80%9A%E5%85%B3%E6%84%9F%E6%83%B3.html</id>
    <published>2023-04-07T15:06:57.000Z</published>
    <updated>2023-04-07T15:27:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>总之就是剧情不错</p><h2 id="战斗"><a href="#战斗" class="headerlink" title="战斗"></a>战斗</h2><p>真的不喜欢，可能是因为我看不懂日语招式，搓不出什么连招，永远被人打断，明明是格斗游戏我却一点也不爽。街上到处都是混混来抓人，真的不想打架，永远在逃避。</p><h2 id="支线"><a href="#支线" class="headerlink" title="支线"></a>支线</h2><p>支线故事都挺有意思，问题就是做不完，找不到，麻烦。</p><p>一周目通关完成度只有35%，估计还差很多很多，懒得做了。</p><h2 id="小游戏"><a href="#小游戏" class="headerlink" title="小游戏"></a>小游戏</h2><p>好玩，但是我太菜了，跳舞hard就死活打不过，对不起。你甚至能在如龙里打麻将，但是这样的小游戏有什么必要吗？难以想象奖杯战士们怎么活。</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>好喜欢神室町，这个地图做的好好哦。</p><h1 id="剧情"><a href="#剧情" class="headerlink" title="剧情"></a>剧情</h1><p>不了解日本黑道真实面貌所以不知道怎么说，真的是这样拿拳头打一百个就能解决问题吗？但是在游戏里找什么真实感呢。</p><p>喜欢反派们最后挡枪死掉的样子。桐生傻了吧唧的也挺可爱，真岛太适合当狗了，之前看到的二创完全是写实，很难不狗塑他。</p><p>因为如龙0好像是在12代之后出的吧，最后谢幕的时候把这群主要人物的死法全给我剧透了。呃呃。</p><p>里面的中国人要素……有刻板印象，但不多？老鬼的中文讲得还挺好。最强杀手几拳打死有点没面子了。立华兄妹惨啊，我很想怀疑像他们这种小孩真的会在中国的电影院被吐口水吗，但是好像还真有可能。</p><p>锦山兄弟哪都好，就是菜了一点。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;总之就是剧情不错&lt;/p&gt;
&lt;h2 id=&quot;战斗&quot;&gt;&lt;a href=&quot;#战斗&quot; class=&quot;headerlink&quot; title=&quot;战斗&quot;&gt;&lt;/a&gt;战斗&lt;/h2&gt;&lt;p&gt;真的不喜欢，可能是因为我看不懂日语招式，搓不出什么连招，永远被人打断，明明是格斗游戏我却一点也不爽。街上到处</summary>
      
    
    
    
    <category term="游戏相关" scheme="http://strange-id.github.io/categories/%E6%B8%B8%E6%88%8F%E7%9B%B8%E5%85%B3/"/>
    
    
    <category term="通关感想" scheme="http://strange-id.github.io/tags/%E9%80%9A%E5%85%B3%E6%84%9F%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>试用Typst写论文</title>
    <link href="http://strange-id.github.io/post/%E8%AF%95%E7%94%A8Typst%E5%86%99%E8%AE%BA%E6%96%87.html"/>
    <id>http://strange-id.github.io/post/%E8%AF%95%E7%94%A8Typst%E5%86%99%E8%AE%BA%E6%96%87.html</id>
    <published>2023-04-07T07:46:51.000Z</published>
    <updated>2023-04-07T08:34:58.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Typst是什么"><a href="#Typst是什么" class="headerlink" title="Typst是什么"></a>Typst是什么</h1><p>写论文的，比markdown强大，比latex简单。我来试试</p><h1 id="论文模板来源"><a href="#论文模板来源" class="headerlink" title="论文模板来源"></a>论文模板来源</h1><p>QQ空间里看到的华科论文模板：<a href="https://github.com/werifu/HUST-typst-template">github链接</a></p><p>感谢这位大佬校友</p><h1 id="问题记录"><a href="#问题记录" class="headerlink" title="问题记录"></a>问题记录</h1><h2 id="import"><a href="#import" class="headerlink" title="import"></a>import</h2><pre class="line-numbers language-none"><code class="language-none">#import &quot;template.typ&quot;: *<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>冒号后面的星号很重要，如果没有的话，后面的：</p><pre class="line-numbers language-none"><code class="language-none">#show: project.with()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>语句就会报错</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Typst是什么&quot;&gt;&lt;a href=&quot;#Typst是什么&quot; class=&quot;headerlink&quot; title=&quot;Typst是什么&quot;&gt;&lt;/a&gt;Typst是什么&lt;/h1&gt;&lt;p&gt;写论文的，比markdown强大，比latex简单。我来试试&lt;/p&gt;
&lt;h1 id=&quot;论文模</summary>
      
    
    
    
    <category term="学习记录" scheme="http://strange-id.github.io/categories/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="小技巧" scheme="http://strange-id.github.io/tags/%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
    <category term="Typst" scheme="http://strange-id.github.io/tags/Typst/"/>
    
  </entry>
  
  <entry>
    <title>java学习日记（三）</title>
    <link href="http://strange-id.github.io/post/java%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89.html"/>
    <id>http://strange-id.github.io/post/java%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89.html</id>
    <published>2023-03-16T11:06:56.000Z</published>
    <updated>2023-03-22T08:00:24.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h1><p>栈内存：基本类型的变量、对象、对象的引用和方法调用（最常用的放在栈内存）</p><ul><li><code>String str1 = new String(&quot;hello&quot;);</code><br>字符串第一次生成时，先把hello放在字符串常量池的一个地址（在方法区里），hello包装成一个对象（在堆地址里的另一个地址），再赋给str1，所以str1是对象</li><li><code>String str2 = &quot;hello&quot;;</code><br><code>String str3 = &quot;hello&quot;;</code><br>str2和str3是相等的字符串常量。在方法区里的字符串常量池里。</li><li>equals方法判断两个字符串是不是相等，不管是对象还是常量</li></ul><ul><li>int类型的默认初始值是0</li></ul><ul><li>类体里只能有变量和方法，不能出现语句，除非用花括号括起来（就是一个语句块了）</li></ul><h1 id="面向对象特性"><a href="#面向对象特性" class="headerlink" title="面向对象特性"></a>面向对象特性</h1><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><p>类是创建对象的模板，对象是类的实例</p><p>类定义：  </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">EmpInfo</span><span class="token punctuation">&#123;</span><span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token comment">//变量</span><span class="token class-name">String</span> designation<span class="token punctuation">;</span><span class="token class-name">String</span> department<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//方法</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token operator">+</span><span class="token string">" is "</span><span class="token operator">+</span> designation<span class="token operator">+</span><span class="token string">" at "</span><span class="token operator">+</span>department<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/strange-id/img@master/202303221512654.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">[</span><span class="token keyword">public</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token keyword">abstract</span><span class="token operator">|</span><span class="token keyword">final</span><span class="token punctuation">]</span> <span class="token keyword">class</span> <span class="token class-name">ClassName</span> <span class="token punctuation">[</span><span class="token keyword">extends</span> <span class="token class-name">SuperClassName</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token keyword">implements</span> <span class="token class-name">InterfaceNameList</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span> … <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>方括号[]表示可有可无  </li><li>abstract是一个抽象类，不能用它生成对象<br>final表示不能再派生子类  </li><li>extends后是子类名字  </li><li>implements后是接口，接口里只有方法名，一个类可以接多个接口，接口是用来规范行为的，说明这些类都有这样的特征</li></ul><h2 id="成员变量"><a href="#成员变量" class="headerlink" title="成员变量"></a>成员变量</h2><h2 id="成员方法"><a href="#成员方法" class="headerlink" title="成员方法"></a>成员方法</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">[</span><span class="token keyword">public</span><span class="token operator">|</span><span class="token keyword">protected</span><span class="token operator">|</span><span class="token keyword">private</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token keyword">static</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token keyword">abstract</span><span class="token operator">|</span><span class="token keyword">final</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token keyword">native</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token keyword">synchronized</span><span class="token punctuation">]</span> <span class="token generics"><span class="token punctuation">&lt;</span>return_type<span class="token punctuation">></span></span> methodName <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token generics"><span class="token punctuation">&lt;</span>argument_list<span class="token punctuation">></span></span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token keyword">throws</span> <span class="token generics"><span class="token punctuation">&lt;</span>exception_list<span class="token punctuation">></span></span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span> … <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>static：类本身固有的</li><li>return type：返回类型（void等）</li><li>argument_list：可能的列表</li><li>throws语句：如果发生异常丢给调用者处理</li></ul><p>方法是传值的，方法调用不会改变参数的值。即调用时参数传递给方法，就是赋值的过程。当对象作为参数时，参数的值是该对象的引用，这时对象的内容可以在方法中改变，但是对象的引用不会改变。</p><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PassTest</span> <span class="token punctuation">&#123;</span><span class="token keyword">float</span> ptValue<span class="token punctuation">;</span><span class="token comment">// 参数类型是基本类型</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">changeInt</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>value <span class="token operator">=</span> <span class="token number">55</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 参数类型是引用型，并且方法中改了变参数的值</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">changeStr</span><span class="token punctuation">(</span><span class="token class-name">String</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>value <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"different"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">changeStrBuild</span><span class="token punctuation">(</span><span class="token class-name">StringBuilder</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// value = new StringBuilder("different");</span>value<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">" world!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 参数类型是引用型，并且方法中改了变参数所指向对象的成员变量值</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">changeObjValue</span><span class="token punctuation">(</span><span class="token class-name">PassTest</span> ref<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>ref<span class="token punctuation">.</span>ptValue <span class="token operator">=</span> <span class="token number">99.0f</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">String</span> str<span class="token punctuation">;</span><span class="token class-name">StringBuilder</span> strB<span class="token punctuation">;</span><span class="token keyword">int</span> val<span class="token punctuation">;</span><span class="token class-name">PassTest</span> pt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PassTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建PassTest的对象</span><span class="token comment">// 测试基本类型参数的传递，观察调用程序中的变量值是否改变</span>val <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span>pt<span class="token punctuation">.</span><span class="token function">changeInt</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Int value is: "</span> <span class="token operator">+</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 测试引用类型参数的传递，观察调用程序中的变量值是否改变</span>str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 值是hello的字符串对象</span>pt<span class="token punctuation">.</span><span class="token function">changeStr</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 把hello改成different</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Str value is: "</span> <span class="token operator">+</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>strB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>pt<span class="token punctuation">.</span><span class="token function">changeStrBuild</span><span class="token punctuation">(</span>strB<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Str value is: "</span> <span class="token operator">+</span> strB<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 测试引用类型参数的传递，观察调用程序中的变量值是否改变</span>pt<span class="token punctuation">.</span>ptValue <span class="token operator">=</span> <span class="token number">101.0f</span><span class="token punctuation">;</span>pt<span class="token punctuation">.</span><span class="token function">changeObjValue</span><span class="token punctuation">(</span>pt<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Pt value is: "</span> <span class="token operator">+</span> pt<span class="token punctuation">.</span>ptValue<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Int</span> value is<span class="token operator">:</span> <span class="token number">11</span><span class="token class-name">Str</span> value is<span class="token operator">:</span> <span class="token class-name">Hello</span><span class="token class-name">Str</span> value is<span class="token operator">:</span> <span class="token class-name">Hello</span> world<span class="token operator">!</span><span class="token class-name">Pt</span> value is<span class="token operator">:</span> <span class="token number">99.0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;内存&quot;&gt;&lt;a href=&quot;#内存&quot; class=&quot;headerlink&quot; title=&quot;内存&quot;&gt;&lt;/a&gt;内存&lt;/h1&gt;&lt;p&gt;栈内存：基本类型的变量、对象、对象的引用和方法调用（最常用的放在栈内存）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;String str1 = </summary>
      
    
    
    
    <category term="学习记录" scheme="http://strange-id.github.io/categories/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="java" scheme="http://strange-id.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>配置python环境记录</title>
    <link href="http://strange-id.github.io/post/%E9%85%8D%E7%BD%AEpython%E7%8E%AF%E5%A2%83%E8%AE%B0%E5%BD%95.html"/>
    <id>http://strange-id.github.io/post/%E9%85%8D%E7%BD%AEpython%E7%8E%AF%E5%A2%83%E8%AE%B0%E5%BD%95.html</id>
    <published>2023-03-08T08:34:44.000Z</published>
    <updated>2023-03-16T12:10:52.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>学姐给的代码打开发现要torch软件包，用pycharm的设置下载不了。原来是要pytorch，赶紧用pip下载，发现命令行没有pip！连python3都没有！</p><ol><li>没设置环境变量</li><li>cmd 输入python弹出微软商店<br>  解决方法是把环境变量上移到微软的前面</li><li>还是没有pip，不是说python3自带的吗!?<br>  看网上说最好下载python3.6.x，否则后面tensorflow什么的会有问题，干脆全部重来算了，这次我要把python装在D盘里。</li></ol><h1 id="python安装"><a href="#python安装" class="headerlink" title="python安装"></a>python安装</h1><p>勾选上Add Python3.6 to Path，就直接安排好环境变量了<br><img src="https://cdn.jsdelivr.net/gh/strange-id/img@master/202303081657244.png"><br>选择安装位置<br><img src="https://cdn.jsdelivr.net/gh/strange-id/img@master/202303081659225.png"></p><p>cmd里测试有没有下好：输入python、pip。发现都有了</p><h1 id="pytorch安装"><a href="#pytorch安装" class="headerlink" title="pytorch安装"></a>pytorch安装</h1><p>试图在cmd里装，出了这样的问题，好像是因为网络不行<br><img src="https://cdn.jsdelivr.net/gh/strange-id/img@master/202303081734863.png"><br>在pycharm的终端里输入：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">pip install torch<span class="token operator">==</span><span class="token number">1.6</span><span class="token number">.0</span> <span class="token operator">-</span>f https<span class="token punctuation">:</span><span class="token operator">//</span>download<span class="token punctuation">.</span>pytorch<span class="token punctuation">.</span>org<span class="token operator">/</span>whl<span class="token operator">/</span>torch_stable<span class="token punctuation">.</span>html```  !<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>https<span class="token punctuation">:</span><span class="token operator">//</span>cdn<span class="token punctuation">.</span>jsdelivr<span class="token punctuation">.</span>net<span class="token operator">/</span>gh<span class="token operator">/</span>strange<span class="token operator">-</span><span class="token builtin">id</span><span class="token operator">/</span>img@master<span class="token operator">/</span><span class="token number">202303081736060</span><span class="token punctuation">.</span>png<span class="token punctuation">)</span>安装成功，不知道为什么，也不想知道了<span class="token comment"># 出现问题more_itertools</span>学姐的代码里有一个<span class="token keyword">from</span> itertools，不知道这是什么包，查询得知可能是anaconda里的包。如何安装anaconda？先把python卸载！<span class="token operator">**</span><span class="token operator">*</span><span class="token number">2023</span>年<span class="token number">3</span>月<span class="token number">16</span>日更新，已经安装anaconda，变成conda环境了。<span class="token comment"># more_itertools</span>学姐用了里面一个叫chunked的方法。```pythonpip install more_itertools<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>安装成功</p><h1 id="OMP-Error-15-Initializing-libiomp5md-dll-but-found-libiomp5md-dll-already-initialized"><a href="#OMP-Error-15-Initializing-libiomp5md-dll-but-found-libiomp5md-dll-already-initialized" class="headerlink" title="OMP: Error #15: Initializing libiomp5md.dll, but found libiomp5md.dll already initialized."></a>OMP: Error #15: Initializing libiomp5md.dll, but found libiomp5md.dll already initialized.</h1><p><a href="https://blog.csdn.net/peacefairy/article/details/110528012">参考链接</a><br>我的问题是该链接中的第一种，删除本代码环境中的libiomp5md.dll文件后成功解决<br><img src="https://cdn.jsdelivr.net/gh/strange-id/img@master/202303162003724.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h1&gt;&lt;p&gt;学姐给的代码打开发现要torch软件包，用pycharm的设置下载不了。原来是要pytorch，赶紧用pip下载，发现命令行</summary>
      
    
    
    
    <category term="学习记录" scheme="http://strange-id.github.io/categories/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="小技巧" scheme="http://strange-id.github.io/tags/%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
    <category term="python" scheme="http://strange-id.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>OMORI 通关感想</title>
    <link href="http://strange-id.github.io/post/OMORI%20%E9%80%9A%E5%85%B3%E6%84%9F%E6%83%B3.html"/>
    <id>http://strange-id.github.io/post/OMORI%20%E9%80%9A%E5%85%B3%E6%84%9F%E6%83%B3.html</id>
    <published>2023-03-07T01:00:23.000Z</published>
    <updated>2023-04-07T08:35:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>一个有点意难平的友情故事</p><h1 id="剧情"><a href="#剧情" class="headerlink" title="剧情"></a>剧情</h1><p>主角SUNNY失手杀了自己姐姐后因为不敢告诉朋友们，四年闭门不出。朋友们也各自分开，开始新生活。在SUNNY搬家离开前最后三天，接受凯的邀请走出家门，了解四年后朋友们的现状，终于鼓起勇气面对现实，向朋友们坦白，开启新生活。</p><h2 id="OMORI"><a href="#OMORI" class="headerlink" title="OMORI"></a>OMORI</h2><p>打怪的时候OMORI有两条命，被打爆一条命时会说“但是OMORI没有屈服”然后丝血复活。玩的时候知道它这个设计肯定有用，肯定是伏笔，结果只有在最后SUNNY打OMORI时候出现了一下，确实很有感觉，但是感觉可以做得更好，告诉我为什么OMORI不会屈服。</p><h2 id="SUNNY"><a href="#SUNNY" class="headerlink" title="SUNNY"></a>SUNNY</h2><p>太惨了，一开始看到可能是SUNNY把姐姐吊死了的时候我真的怀疑世界了。这么好的姐姐你为什么干出这种事？？？难道跟朋友们友好相处的你全是演的吗？其实心里一直讨厌大家？影帝？还好只是意外推了姐姐一把，但这样感觉姐姐真的死的憋屈。玩到的时候感觉意外，但是不多。</p><p>畏罪把姐姐吊起来装自杀，你爸妈没有验尸吗，这点小伎俩估计只骗到了朋友们，其实爸妈都知道，所以爸才没在游戏里出现，估计早离婚了。</p><p>最后自杀我觉得是很合理的结局，在家蹲了四年，出门得知好朋友贝瑟尔因为帮忙掩饰自己的秘密四年一直被霸凌，跟自己内心的OMORI打了一架但是没打过，可不就医院天台一跳完事了吗。亲手杀了最爱的姐姐，害的朋友生活在痛苦中，要是我我也受不了。</p><h2 id="英雄"><a href="#英雄" class="headerlink" title="英雄"></a>英雄</h2><p>真好啊真好啊，谁不想要这样的哥哥。无论最终当厨子还是当医生，肯定都能做到最好。希望能找到幸福吧。</p><h2 id="凯"><a href="#凯" class="headerlink" title="凯"></a>凯</h2><p>真好啊凯宝，阳光开朗大男孩，这群朋友们发神经质的时候，他缺神经的特质是最好的氛围调节剂。喜欢。</p><h2 id="奥布里"><a href="#奥布里" class="headerlink" title="奥布里"></a>奥布里</h2><p>长大后的奥布里第一眼我真的没认出来，真的很震惊，那么可爱的奥布里为什么会变成不良少女。但你说她不良，她和她朋友们也没干什么坏事，只是骑骑滑板车。玛里死后她应该也经历了很多。之前说想把头发染成粉色，但家里爸爸管得严。后面到她家里一看，垃圾遍地，她妈妈看着电视一动不动，就知道这个家也完蛋。惨。但是她交到了新朋友，小金是真心关心她，知足了。</p><p>她和SUNNY，如果没有这场意外，应该也会很顺利地在一起，只不过四年过去，有的感情已经磨没了。成为彼此童年回忆里的白月光也就够了。</p><p>所以要是没有被打断，奥布里打算对SUNNY说什么呢？我还在乎你？我曾经喜欢你？无所谓了，她放弃了。</p><h2 id="贝瑟尔"><a href="#贝瑟尔" class="headerlink" title="贝瑟尔"></a>贝瑟尔</h2><p>全程查无此人，他家花田我都忘了浇水了。很莫名其妙，你和SUNNY到底有什么感情能让你俩是最好的朋友？OMORI和那三人一直一起旅行，时时刻刻能感受到大家的羁绊，但贝瑟尔就局外人。他发神经也发得莫名其妙的，感觉对他的刻画不是很够吧。</p><h2 id="玛里"><a href="#玛里" class="headerlink" title="玛里"></a>玛里</h2><p>美 惨</p><p>姐姐知道你不是故意的，肯定会原谅你，姐姐也希望你能原谅你自己。</p><p>在玛里墓碑前，四个朋友一起野餐的时候我真的泪目了，这是SUNNY梦里的存档画面，是他最美好的回忆，但是现实中姐姐再也不能为大家准备野餐了。</p><h1 id="玩法"><a href="#玩法" class="headerlink" title="玩法"></a>玩法</h1><p>我个人是不太喜欢这种rpg游戏的玩法，很麻烦很无聊。地图上的怪还那么多，躲都躲不掉。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>很喜欢剧情，但不想打第二遍，自闭线就看了剧透。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;一个有点意难平的友情故事&lt;/p&gt;
&lt;h1 id=&quot;剧情&quot;&gt;&lt;a href=&quot;#剧情&quot; class=&quot;headerlink&quot; title=&quot;剧情&quot;&gt;&lt;/a&gt;剧情&lt;/h1&gt;&lt;p&gt;主角SUNNY失手杀了自己姐姐后因为不敢告诉朋友们，四年闭门不出。朋友们也各自分开，开始新生活。在S</summary>
      
    
    
    
    <category term="游戏相关" scheme="http://strange-id.github.io/categories/%E6%B8%B8%E6%88%8F%E7%9B%B8%E5%85%B3/"/>
    
    
    <category term="通关感想" scheme="http://strange-id.github.io/tags/%E9%80%9A%E5%85%B3%E6%84%9F%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>java学习日记（二）</title>
    <link href="http://strange-id.github.io/post/java%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89.html"/>
    <id>http://strange-id.github.io/post/java%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89.html</id>
    <published>2023-03-01T12:27:39.000Z</published>
    <updated>2023-03-16T11:07:48.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="面向对象的编程思想"><a href="#面向对象的编程思想" class="headerlink" title="面向对象的编程思想"></a>面向对象的编程思想</h1><p>面向过程编程是数据结构和算法分开的，直接上手编算法解决问题。</p><p>面向对象编程是先把问题抽象成对象，对象中有它的特点（数据结构）和解决方法（算法），数据结构和算法杂糅在一起处理。</p><h1 id="类、继承"><a href="#类、继承" class="headerlink" title="类、继承"></a>类、继承</h1><p>java中的Object类：</p><ul><li>是最顶级的类，所有其他的类都是它直接或间接的子类。</li><li>类型是Object的变量可以指向任意的对象</li><li>Object提供了运行在JVM中的所有对象都需要的行为（方法）</li></ul><p>继承：</p><ul><li>通过继承可以重用父类中代码</li><li>程序员可以定义含有一般行为的抽象类。抽象类的很多方法是没有实现细节的。可以在抽象类的基础上定义特定的子类，实现具体的细节。（java的接口中所有方法都没有实现细节，只是确定一些规范）</li></ul><h1 id="小例子"><a href="#小例子" class="headerlink" title="小例子"></a>小例子</h1><p>求长方形的周长和面积编程</p><h2 id="创建一个新的类"><a href="#创建一个新的类" class="headerlink" title="创建一个新的类"></a>创建一个新的类</h2><p>首先在工程文件中的<strong>src（源码文件）</strong>中创建新的<strong>包（package）</strong>，在新的包中创建新的<strong>类（class）</strong>，在类里面编程</p><h2 id="程序示例"><a href="#程序示例" class="headerlink" title="程序示例"></a>程序示例</h2><ol><li>用面向过程的思想编程<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">chp2_oop</span><span class="token punctuation">;</span> <span class="token comment">//面对过程编程的长方形</span><span class="token keyword">class</span> <span class="token class-name">Rectangle1</span> <span class="token punctuation">&#123;</span><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">perimeter</span><span class="token punctuation">(</span><span class="token keyword">int</span> length<span class="token punctuation">,</span> <span class="token keyword">int</span> width<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token punctuation">(</span>length <span class="token operator">+</span> width<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">area</span><span class="token punctuation">(</span><span class="token keyword">int</span> length<span class="token punctuation">,</span> <span class="token keyword">int</span> width<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> length <span class="token operator">*</span> width<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"perimeter = "</span> <span class="token operator">+</span> <span class="token class-name">Rectangle1</span><span class="token punctuation">.</span><span class="token function">perimeter</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"area = "</span> <span class="token operator">+</span> <span class="token class-name">Rectangle1</span><span class="token punctuation">.</span><span class="token function">area</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>用面向对象的思想编程<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">chp2_oop</span><span class="token punctuation">;</span> <span class="token comment">//面对对象编程长方形</span><span class="token keyword">class</span> <span class="token class-name">Rectangle2</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> l<span class="token punctuation">,</span> w<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">perimeter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> w<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">area</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> l <span class="token operator">*</span> w<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Rectangle2</span> rect1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Rectangle2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Rectangle2</span> rect2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Rectangle2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>rect1<span class="token punctuation">.</span>l <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>rect1<span class="token punctuation">.</span>w <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"perimeter of rect1 = "</span> <span class="token operator">+</span> rect1<span class="token punctuation">.</span><span class="token function">perimeter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"area of rect1 = "</span> <span class="token operator">+</span> rect1<span class="token punctuation">.</span><span class="token function">area</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>rect2<span class="token punctuation">.</span>l <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>rect2<span class="token punctuation">.</span>w <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"perimeter of rect2 = "</span> <span class="token operator">+</span> rect2<span class="token punctuation">.</span><span class="token function">perimeter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"area of rect2 = "</span> <span class="token operator">+</span> rect2<span class="token punctuation">.</span><span class="token function">area</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="不同类中调用？"><a href="#不同类中调用？" class="headerlink" title="不同类中调用？"></a>不同类中调用？</h2><p>文件Rectangle.java中程序：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">chp2_oop</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Rectangle</span> <span class="token punctuation">&#123;</span><span class="token keyword">float</span> l<span class="token punctuation">,</span> w<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">perimeter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> w<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">float</span> <span class="token function">area</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> l <span class="token operator">*</span> w<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">Rectangle</span><span class="token punctuation">(</span><span class="token keyword">float</span> l<span class="token punctuation">,</span> <span class="token keyword">float</span> w<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 与类名相同，叫构造方法</span><span class="token keyword">this</span><span class="token punctuation">.</span>l <span class="token operator">=</span> l<span class="token punctuation">;</span> <span class="token comment">// 如果不用同名，就不用加this。但是用this会比较清楚</span><span class="token keyword">this</span><span class="token punctuation">.</span>w <span class="token operator">=</span> w<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>文件TestRect.java中程序：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">chp2_oop</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestRect</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Rectangle</span> rect1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Rectangle</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// new就是基于已有的对象构造的、定义的数据类型不能错</span><span class="token class-name">Rectangle</span> rect2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Rectangle</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"perimeter of rect1 = "</span> <span class="token operator">+</span> rect1<span class="token punctuation">.</span><span class="token function">perimeter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"area of rect1 = "</span> <span class="token operator">+</span> rect1<span class="token punctuation">.</span><span class="token function">area</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"perimeter of rect2 = "</span> <span class="token operator">+</span> rect2<span class="token punctuation">.</span><span class="token function">perimeter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"area of rect2 = "</span> <span class="token operator">+</span> rect2<span class="token punctuation">.</span><span class="token function">area</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行TestRect.java得到结果</p><h2 id="一些细节"><a href="#一些细节" class="headerlink" title="一些细节"></a>一些细节</h2><ul><li>创建类时用public，就可以被包里的其他类访问</li><li>注意数据类型<br><img src="https://cdn.jsdelivr.net/gh/strange-id/img@master/202303012047742.png"><br>强行改成int型<br><img src="https://cdn.jsdelivr.net/gh/strange-id/img@master/202303012049131.png"></li><li>声明变量或状态值或类时用private，说明私密，其他类无法调用</li><li>方法说明前面有个C，说明它是与类同名的构造方法<br><img src="https://cdn.jsdelivr.net/gh/strange-id/img@master/202303012048165.png"></li><li>edit-Find&#x2F;Replace：查找与替换</li><li>Source-Format：自动把代码格式改得好看一点</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;面向对象的编程思想&quot;&gt;&lt;a href=&quot;#面向对象的编程思想&quot; class=&quot;headerlink&quot; title=&quot;面向对象的编程思想&quot;&gt;&lt;/a&gt;面向对象的编程思想&lt;/h1&gt;&lt;p&gt;面向过程编程是数据结构和算法分开的，直接上手编算法解决问题。&lt;/p&gt;
&lt;p&gt;面向对象</summary>
      
    
    
    
    <category term="学习记录" scheme="http://strange-id.github.io/categories/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="java" scheme="http://strange-id.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>基于Cartpole-V1环境的PPO算法测试（二）</title>
    <link href="http://strange-id.github.io/post/%E5%9F%BA%E4%BA%8ECartpole-V1%E7%8E%AF%E5%A2%83%E7%9A%84PPO%E7%AE%97%E6%B3%95%E6%B5%8B%E8%AF%95%EF%BC%88%E4%BA%8C%EF%BC%89.html"/>
    <id>http://strange-id.github.io/post/%E5%9F%BA%E4%BA%8ECartpole-V1%E7%8E%AF%E5%A2%83%E7%9A%84PPO%E7%AE%97%E6%B3%95%E6%B5%8B%E8%AF%95%EF%BC%88%E4%BA%8C%EF%BC%89.html</id>
    <published>2023-03-01T08:36:13.000Z</published>
    <updated>2023-03-01T09:05:50.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>昨天看到了倒立摆，今天用PPO训练了倒立摆，明天的目标是让训练结果可视化。</p><p><a href="https://blog.csdn.net/weixin_43292547/article/details/120254497">代码来源</a></p><p>该代码和我的环境不一样，所以有几个小问题。</p><h1 id="代码环境（重要）"><a href="#代码环境（重要）" class="headerlink" title="代码环境（重要）"></a>代码环境（重要）</h1><table><thead><tr><th align="center">包</th><th align="center">版本号</th></tr></thead><tbody><tr><td align="center">python</td><td align="center">3.11</td></tr><tr><td align="center">gym</td><td align="center">0.26.2</td></tr><tr><td align="center">numpy</td><td align="center">1.23.5</td></tr><tr><td align="center">keras</td><td align="center">2.12.0rc1</td></tr><tr><td align="center">tensonflow</td><td align="center">2.12.0rc0</td></tr></tbody></table><h1 id="问题及解决方法"><a href="#问题及解决方法" class="headerlink" title="问题及解决方法"></a>问题及解决方法</h1><h2 id="1-env-seed-1"><a href="#1-env-seed-1" class="headerlink" title="1. env.seed(1)"></a>1. <code>env.seed(1)</code></h2><p>这个函数好像已经没了！解决方案暂时没有去找。因为今天还不涉及调参数，每次训练的初始环境也无所谓吧？就算调也无所谓吧？</p><h2 id="2-env-action-space-n"><a href="#2-env-action-space-n" class="headerlink" title="2. env.action_space.n"></a>2. <code>env.action_space.n</code></h2><p>这个<code>.n</code>好像也没了，但是不报错只警告，无视。</p><h2 id="3-s-s-np-newaxis"><a href="#3-s-s-np-newaxis" class="headerlink" title="3. s = s[np.newaxis, :]"></a>3. <code>s = s[np.newaxis, :]</code></h2><p>这句话的意思是在s基础上再加一维，原代码的s应该是一个一维数组，但是现在它是一个一维数组加一个空字典（？）</p><p>总之就是会报错，不能在一个元组里再加元组：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">tuple</span> indices must be integers <span class="token keyword">or</span> slices<span class="token punctuation">,</span> <span class="token keyword">not</span> <span class="token builtin">tuple</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>解决方法：</p><p>原代码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">s <span class="token operator">=</span> env<span class="token punctuation">.</span>reset<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>更改为：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">s <span class="token operator">=</span> env<span class="token punctuation">.</span>reset<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token comment">#只要前面的一维数组就好了</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="成功运行！"><a href="#成功运行！" class="headerlink" title="成功运行！"></a>成功运行！</h2><p><img src="https://cdn.jsdelivr.net/gh/strange-id/img@master/202303011641323.png"></p><h2 id="附上代码（更改后）"><a href="#附上代码（更改后）" class="headerlink" title="附上代码（更改后）"></a>附上代码（更改后）</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> tensorflow <span class="token keyword">as</span> tf<span class="token keyword">from</span> tensorflow <span class="token keyword">import</span> keras<span class="token keyword">from</span> keras<span class="token punctuation">.</span>layers <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> gymnp<span class="token punctuation">.</span>random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>tf<span class="token punctuation">.</span>random<span class="token punctuation">.</span>set_seed<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>EP_MAX <span class="token operator">=</span> <span class="token number">1000</span>EP_LEN <span class="token operator">=</span> <span class="token number">500</span>GAMMA <span class="token operator">=</span> <span class="token number">0.9</span>  <span class="token comment"># reward discount factor</span>A_LR <span class="token operator">=</span> <span class="token number">0.0001</span>  <span class="token comment"># learning rate for actor actor的学习率</span>C_LR <span class="token operator">=</span> <span class="token number">0.0001</span>  <span class="token comment"># learning rate for critic</span>UPDATE_STEP <span class="token operator">=</span> <span class="token number">15</span>  <span class="token comment"># loop update operation n-steps</span>EPSILON <span class="token operator">=</span> <span class="token number">0.2</span>  <span class="token comment"># for clipping surrogate objective</span>GAME <span class="token operator">=</span> <span class="token string">'CartPole-v1'</span>    <span class="token comment">#游戏名</span>env <span class="token operator">=</span> gym<span class="token punctuation">.</span>make<span class="token punctuation">(</span>GAME<span class="token punctuation">,</span> render_mode<span class="token operator">=</span><span class="token string">"human"</span><span class="token punctuation">)</span><span class="token comment">#env.seed(1) #没这个函数了</span>S_DIM <span class="token operator">=</span> env<span class="token punctuation">.</span>observation_space<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>A_DIM <span class="token operator">=</span> env<span class="token punctuation">.</span>action_space<span class="token punctuation">.</span>n<span class="token comment">#print(S_DIM, A_DIM) #4，2。说明观测空间是个4维向量，动作是2维的（向左0，向右1）</span><span class="token keyword">class</span> <span class="token class-name">PPO</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>opt_a <span class="token operator">=</span> tf<span class="token punctuation">.</span>keras<span class="token punctuation">.</span>optimizers<span class="token punctuation">.</span>Adam<span class="token punctuation">(</span>A_LR<span class="token punctuation">)</span> <span class="token comment">#计算梯度下降的亚当算法</span>        self<span class="token punctuation">.</span>opt_c <span class="token operator">=</span> tf<span class="token punctuation">.</span>keras<span class="token punctuation">.</span>optimizers<span class="token punctuation">.</span>Adam<span class="token punctuation">(</span>C_LR<span class="token punctuation">)</span> <span class="token comment">#AC网络</span>        self<span class="token punctuation">.</span>model_a <span class="token operator">=</span> self<span class="token punctuation">.</span>_build_anet<span class="token punctuation">(</span>trainable<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token comment">#可训练</span>        self<span class="token punctuation">.</span>model_a_old <span class="token operator">=</span> self<span class="token punctuation">.</span>_build_anet<span class="token punctuation">(</span>trainable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span> <span class="token comment">#不可训练</span>        self<span class="token punctuation">.</span>model_c <span class="token operator">=</span> self<span class="token punctuation">.</span>_build_cnet<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">_build_anet</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> trainable<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment">#建立A网络</span>        tfs_a <span class="token operator">=</span> Input<span class="token punctuation">(</span><span class="token punctuation">[</span>S_DIM<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">)</span>    <span class="token comment">#输入层</span>        l1 <span class="token operator">=</span> Dense<span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">'relu'</span><span class="token punctuation">,</span> trainable<span class="token operator">=</span>trainable<span class="token punctuation">)</span><span class="token punctuation">(</span>tfs_a<span class="token punctuation">)</span> <span class="token comment">#全连接层 'relu'是激活函数</span>        a_prob <span class="token operator">=</span> Dense<span class="token punctuation">(</span>A_DIM<span class="token punctuation">,</span> <span class="token string">'softmax'</span><span class="token punctuation">,</span> trainable<span class="token operator">=</span>trainable<span class="token punctuation">)</span><span class="token punctuation">(</span>l1<span class="token punctuation">)</span>        model_a <span class="token operator">=</span> keras<span class="token punctuation">.</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">(</span>inputs<span class="token operator">=</span>tfs_a<span class="token punctuation">,</span> outputs<span class="token operator">=</span>a_prob<span class="token punctuation">)</span>        <span class="token keyword">return</span> model_a    <span class="token keyword">def</span> <span class="token function">_build_cnet</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment">#建立C网络</span>        tfs_c <span class="token operator">=</span> Input<span class="token punctuation">(</span><span class="token punctuation">[</span>S_DIM<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">)</span>        l1 <span class="token operator">=</span> Dense<span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">'relu'</span><span class="token punctuation">)</span><span class="token punctuation">(</span>tfs_c<span class="token punctuation">)</span>        v <span class="token operator">=</span> Dense<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">(</span>l1<span class="token punctuation">)</span>        model_c <span class="token operator">=</span> keras<span class="token punctuation">.</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">(</span>inputs<span class="token operator">=</span>tfs_c<span class="token punctuation">,</span> outputs<span class="token operator">=</span>v<span class="token punctuation">)</span>        model_c<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span>optimizer<span class="token operator">=</span>self<span class="token punctuation">.</span>opt_c<span class="token punctuation">,</span> loss<span class="token operator">=</span><span class="token string">'mse'</span><span class="token punctuation">)</span>   <span class="token comment">#model.compile(optimizer = 优化器，loss = 损失函数，metrics = ["准确率”])</span>        <span class="token keyword">return</span> model_c    <span class="token keyword">def</span> <span class="token function">update</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">,</span> a<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>model_a_old<span class="token punctuation">.</span>set_weights<span class="token punctuation">(</span>self<span class="token punctuation">.</span>model_a<span class="token punctuation">.</span>get_weights<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">#设置权重</span>        v <span class="token operator">=</span> self<span class="token punctuation">.</span>get_v<span class="token punctuation">(</span>s<span class="token punctuation">)</span>        adv <span class="token operator">=</span> r <span class="token operator">-</span> v        oldpi <span class="token operator">=</span> self<span class="token punctuation">.</span>model_a_old<span class="token punctuation">(</span>s<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>UPDATE_STEP<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">with</span> tf<span class="token punctuation">.</span>GradientTape<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> tape<span class="token punctuation">:</span>                pi <span class="token operator">=</span> self<span class="token punctuation">.</span>model_a<span class="token punctuation">(</span>s<span class="token punctuation">)</span>                <span class="token comment"># xx=tf.shape(a)[0]</span>                <span class="token comment"># xxx=tf.range(xx, dtype=tf.int32)</span>                a_indices <span class="token operator">=</span> tf<span class="token punctuation">.</span>stack<span class="token punctuation">(</span><span class="token punctuation">[</span>tf<span class="token punctuation">.</span><span class="token builtin">range</span><span class="token punctuation">(</span>tf<span class="token punctuation">.</span>shape<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>tf<span class="token punctuation">.</span>int32<span class="token punctuation">)</span><span class="token punctuation">,</span> a<span class="token punctuation">]</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>                pi_prob <span class="token operator">=</span> tf<span class="token punctuation">.</span>gather_nd<span class="token punctuation">(</span>params<span class="token operator">=</span>pi<span class="token punctuation">,</span> indices<span class="token operator">=</span>a_indices<span class="token punctuation">)</span>                oldpi_prob <span class="token operator">=</span> tf<span class="token punctuation">.</span>gather_nd<span class="token punctuation">(</span>params<span class="token operator">=</span>oldpi<span class="token punctuation">,</span> indices<span class="token operator">=</span>a_indices<span class="token punctuation">)</span>                ratio <span class="token operator">=</span> pi_prob <span class="token operator">/</span> <span class="token punctuation">(</span>oldpi_prob <span class="token operator">+</span> <span class="token number">1e-5</span><span class="token punctuation">)</span>                surr <span class="token operator">=</span> ratio <span class="token operator">*</span> adv                x2 <span class="token operator">=</span> tf<span class="token punctuation">.</span>clip_by_value<span class="token punctuation">(</span>ratio<span class="token punctuation">,</span> <span class="token number">1.</span> <span class="token operator">-</span> EPSILON<span class="token punctuation">,</span> <span class="token number">1.</span> <span class="token operator">+</span> EPSILON<span class="token punctuation">)</span> <span class="token operator">*</span> adv                x3 <span class="token operator">=</span> tf<span class="token punctuation">.</span>minimum<span class="token punctuation">(</span>surr<span class="token punctuation">,</span> x2<span class="token punctuation">)</span>                aloss <span class="token operator">=</span> <span class="token operator">-</span>tf<span class="token punctuation">.</span>reduce_mean<span class="token punctuation">(</span>x3<span class="token punctuation">)</span>            a_grads <span class="token operator">=</span> tape<span class="token punctuation">.</span>gradient<span class="token punctuation">(</span>aloss<span class="token punctuation">,</span> self<span class="token punctuation">.</span>model_a<span class="token punctuation">.</span>trainable_weights<span class="token punctuation">)</span>            a_grads_and_vars <span class="token operator">=</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>a_grads<span class="token punctuation">,</span> self<span class="token punctuation">.</span>model_a<span class="token punctuation">.</span>trainable_weights<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>opt_a<span class="token punctuation">.</span>apply_gradients<span class="token punctuation">(</span>a_grads_and_vars<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>model_c<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>s<span class="token punctuation">,</span> r<span class="token punctuation">,</span> verbose<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>epochs<span class="token operator">=</span>UPDATE_STEP<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">choose_action</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">:</span>        s <span class="token operator">=</span> s<span class="token punctuation">[</span>np<span class="token punctuation">.</span>newaxis<span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span>    <span class="token comment">#这里一开始报错了，因为env.reset()返回的不是一个一维数组，而是一个二维的元组。报错：元组里不能套元组（？），解决方案是不要后面的那个空元组</span>        prob_weights <span class="token operator">=</span> self<span class="token punctuation">.</span>model_a<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span>        action <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>prob_weights<span class="token punctuation">)</span><span class="token punctuation">,</span> p<span class="token operator">=</span>prob_weights<span class="token punctuation">)</span>        <span class="token keyword">return</span> action    <span class="token keyword">def</span> <span class="token function">get_v</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">#</span>        s <span class="token operator">=</span> s<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> S_DIM<span class="token punctuation">)</span>    <span class="token comment">#把s变成一个列数为S_DIM，行数需要计算的矩阵</span>        v <span class="token operator">=</span> self<span class="token punctuation">.</span>model_c<span class="token punctuation">(</span>s<span class="token punctuation">)</span>        <span class="token keyword">return</span> v<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    ppo <span class="token operator">=</span> PPO<span class="token punctuation">(</span><span class="token punctuation">)</span>    GLOBAL_EP <span class="token operator">=</span> <span class="token number">0</span>    GLOBAL_RUNNING_R <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    render <span class="token operator">=</span> <span class="token boolean">False</span>    <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>EP_MAX<span class="token punctuation">)</span><span class="token punctuation">:</span>        s <span class="token operator">=</span> env<span class="token punctuation">.</span>reset<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token comment">#这里原先是“s = env.reset()”，会报错，加上[0]就好了</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>        ep_r <span class="token operator">=</span> <span class="token number">0</span>        buffer_s<span class="token punctuation">,</span> buffer_a<span class="token punctuation">,</span> buffer_r <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment"># clear history buffer, use new policy to collect data</span>        <span class="token keyword">for</span> t <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>EP_LEN<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> render<span class="token punctuation">:</span> env<span class="token punctuation">.</span>render<span class="token punctuation">(</span><span class="token punctuation">)</span>            a <span class="token operator">=</span> ppo<span class="token punctuation">.</span>choose_action<span class="token punctuation">(</span>s<span class="token punctuation">)</span>            s_<span class="token punctuation">,</span> r<span class="token punctuation">,</span> done<span class="token punctuation">,</span> _ <span class="token punctuation">,</span> _ <span class="token operator">=</span> env<span class="token punctuation">.</span>step<span class="token punctuation">(</span>a<span class="token punctuation">)</span>  <span class="token comment">#step要返回5个参数？observation, reward, terminated, truncated, info = env.step(action)？</span>            <span class="token keyword">if</span> done<span class="token punctuation">:</span> r <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">10</span>            buffer_s<span class="token punctuation">.</span>append<span class="token punctuation">(</span>s<span class="token punctuation">)</span>            buffer_a<span class="token punctuation">.</span>append<span class="token punctuation">(</span>a<span class="token punctuation">)</span>            buffer_r<span class="token punctuation">.</span>append<span class="token punctuation">(</span>r <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment"># 0 for not down, -11 for down. Reward engineering</span>            s <span class="token operator">=</span> s_            ep_r <span class="token operator">+=</span> r            <span class="token keyword">if</span> t <span class="token operator">==</span> EP_LEN <span class="token operator">-</span> <span class="token number">1</span> <span class="token keyword">or</span> done<span class="token punctuation">:</span>                <span class="token keyword">if</span> done<span class="token punctuation">:</span>                    v_s_ <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment"># end of episode</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    v_s_ <span class="token operator">=</span> ppo<span class="token punctuation">.</span>get_v<span class="token punctuation">(</span>s_<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>                discounted_r <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment"># compute discounted reward</span>                <span class="token keyword">for</span> r <span class="token keyword">in</span> buffer_r<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                    v_s_ <span class="token operator">=</span> r <span class="token operator">+</span> GAMMA <span class="token operator">*</span> v_s_                    discounted_r<span class="token punctuation">.</span>append<span class="token punctuation">(</span>v_s_<span class="token punctuation">)</span>                discounted_r<span class="token punctuation">.</span>reverse<span class="token punctuation">(</span><span class="token punctuation">)</span>                bs<span class="token punctuation">,</span> ba<span class="token punctuation">,</span> br <span class="token operator">=</span> np<span class="token punctuation">.</span>vstack<span class="token punctuation">(</span>buffer_s<span class="token punctuation">)</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>vstack<span class="token punctuation">(</span>buffer_a<span class="token punctuation">)</span><span class="token punctuation">.</span>ravel<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>discounted_r<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">]</span>                ppo<span class="token punctuation">.</span>update<span class="token punctuation">(</span>bs<span class="token punctuation">,</span> ba<span class="token punctuation">,</span> br<span class="token punctuation">)</span>                <span class="token keyword">break</span>        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>GLOBAL_RUNNING_R<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            GLOBAL_RUNNING_R<span class="token punctuation">.</span>append<span class="token punctuation">(</span>ep_r<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            GLOBAL_RUNNING_R<span class="token punctuation">.</span>append<span class="token punctuation">(</span>GLOBAL_RUNNING_R<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">0.9</span> <span class="token operator">+</span> ep_r <span class="token operator">*</span> <span class="token number">0.1</span><span class="token punctuation">)</span>        GLOBAL_EP <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>GLOBAL_EP<span class="token punctuation">,</span> <span class="token string">'|Ep_r: %.2f'</span> <span class="token operator">%</span> ep_r<span class="token punctuation">)</span>        <span class="token keyword">if</span> ep_r <span class="token operator">></span> <span class="token number">180</span><span class="token punctuation">:</span> render <span class="token operator">=</span> <span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h1&gt;&lt;p&gt;昨天看到了倒立摆，今天用PPO训练了倒立摆，明天的目标是让训练结果可视化。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csd</summary>
      
    
    
    
    <category term="学习记录" scheme="http://strange-id.github.io/categories/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="强化学习" scheme="http://strange-id.github.io/tags/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="PPO" scheme="http://strange-id.github.io/tags/PPO/"/>
    
  </entry>
  
  <entry>
    <title>基于Cartpole-V1环境的PPO算法测试（一）</title>
    <link href="http://strange-id.github.io/post/%E5%9F%BA%E4%BA%8ECartpole-V1%E7%8E%AF%E5%A2%83%E7%9A%84PPO%E7%AE%97%E6%B3%95%E6%B5%8B%E8%AF%95%EF%BC%88%E4%B8%80%EF%BC%89.html"/>
    <id>http://strange-id.github.io/post/%E5%9F%BA%E4%BA%8ECartpole-V1%E7%8E%AF%E5%A2%83%E7%9A%84PPO%E7%AE%97%E6%B3%95%E6%B5%8B%E8%AF%95%EF%BC%88%E4%B8%80%EF%BC%89.html</id>
    <published>2023-02-28T02:29:37.000Z</published>
    <updated>2023-02-28T05:16:12.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>学长说要用CartPole练练手，找找调参的感觉。现在感觉毕设好像真的做不完了。</p><h1 id="建立环境"><a href="#建立环境" class="headerlink" title="建立环境"></a>建立环境</h1><p>网上很多教程都是CartPole-V0相关的，但是gym更新了V1，教程很少，bug很多。</p><p>首先安装gym工具包：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">pip install gym<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>V0的代码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> gym  <span class="token comment">#调用</span>env <span class="token operator">=</span> gym<span class="token punctuation">.</span>make<span class="token punctuation">(</span><span class="token string">'CartPole-v0'</span><span class="token punctuation">)</span> <span class="token comment">#创建模型</span>env<span class="token punctuation">.</span>reset<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#初始化</span><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">#玩1000个回合</span>    env<span class="token punctuation">.</span>render<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">#刷新当前环境并显示</span>    env<span class="token punctuation">.</span>step<span class="token punctuation">(</span>env<span class="token punctuation">.</span>action_space<span class="token punctuation">.</span>sample<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 随机采样动作</span>env<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#1000回合后游戏结束</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="gym的0-26-2版本下报错及解决方案"><a href="#gym的0-26-2版本下报错及解决方案" class="headerlink" title="gym的0.26.2版本下报错及解决方案"></a>gym的0.26.2版本下报错及解决方案</h2><h3 id="1-V0没了，改成V1"><a href="#1-V0没了，改成V1" class="headerlink" title="1. V0没了，改成V1"></a>1. V0没了，改成V1</h3><h3 id="2-设置render的模式"><a href="#2-设置render的模式" class="headerlink" title="2. 设置render的模式"></a>2. 设置render的模式</h3><p>有三种模式可以选择：human、rgb_array、ansi。human是用pygame显示玩游戏的画面；rgb_array是一个rgb数组；ansi不知道是什么。  </p><pre class="line-numbers language-python" data-language="python"><code class="language-python">env <span class="token operator">=</span> gym<span class="token punctuation">.</span>make<span class="token punctuation">(</span><span class="token string">'CartPole-v1'</span><span class="token punctuation">,</span>render_mode<span class="token operator">=</span><span class="token string">"human"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>设置完还是会报错！</p><h3 id="3-安装可能需要的包"><a href="#3-安装可能需要的包" class="headerlink" title="3. 安装可能需要的包"></a>3. 安装可能需要的包</h3><p>修改</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">pip install pyglet<span class="token operator">==</span><span class="token number">1.2</span><span class="token number">.4</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>还是报错，发现没有安装<strong>pygame</strong>包</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">pip install pygame<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装完解决，终于看到这个摆了。（所以还是不知道这个pyglet的版本跟错误有没有关系）</p><p><img src="https://cdn.jsdelivr.net/gh/strange-id/img@master/202302281031890.png"></p><p>更改后代码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> gymenv <span class="token operator">=</span> gym<span class="token punctuation">.</span>make<span class="token punctuation">(</span><span class="token string">'CartPole-v1'</span><span class="token punctuation">,</span>render_mode<span class="token operator">=</span><span class="token string">"human"</span><span class="token punctuation">)</span>env<span class="token punctuation">.</span>reset<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    env<span class="token punctuation">.</span>render<span class="token punctuation">(</span><span class="token punctuation">)</span>    env<span class="token punctuation">.</span>step<span class="token punctuation">(</span>env<span class="token punctuation">.</span>action_space<span class="token punctuation">.</span>sample<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># take a random action</span>env<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h1&gt;&lt;p&gt;学长说要用CartPole练练手，找找调参的感觉。现在感觉毕设好像真的做不完了。&lt;/p&gt;
&lt;h1 id=&quot;建立环境&quot;&gt;&lt;a href=&quot;#建</summary>
      
    
    
    
    <category term="学习记录" scheme="http://strange-id.github.io/categories/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="强化学习" scheme="http://strange-id.github.io/tags/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="PPO" scheme="http://strange-id.github.io/tags/PPO/"/>
    
  </entry>
  
  <entry>
    <title>Streaming+直播录制</title>
    <link href="http://strange-id.github.io/post/Streaming%E7%9B%B4%E6%92%AD%E5%BD%95%E5%88%B6.html"/>
    <id>http://strange-id.github.io/post/Streaming%E7%9B%B4%E6%92%AD%E5%BD%95%E5%88%B6.html</id>
    <published>2023-02-25T14:40:47.000Z</published>
    <updated>2023-02-28T03:17:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>少女歌剧revue starlight #4 climax舞台初日！眩しい！</p><span id="more"></span><h1 id="Streaming-是什么？"><a href="#Streaming-是什么？" class="headerlink" title="Streaming+是什么？"></a>Streaming+是什么？</h1><p>这是由eplus提供的付费门票制媒体流服务。很多日本舞台的直播都在eplus上卖，中国大陆人购票观看体验还是很不错的。</p><h1 id="录制工具：Stream-Recorder"><a href="#录制工具：Stream-Recorder" class="headerlink" title="录制工具：Stream Recorder"></a>录制工具：Stream Recorder</h1><p>谷歌浏览器插件Stream Recorder，真的很好用。几乎可以录制除了该死的niconico生放时光机以外的所有网页视频。</p><p>有两种模式：Normal和Capture，Streaming+直播可以在直播期间用Normal模式录制。</p><h1 id="网络环境"><a href="#网络环境" class="headerlink" title="网络环境"></a>网络环境</h1><p>无需翻墙，直连即可。在购票前可以在Streaming+官网测试一下网络环境。</p><h1 id="注意事项！！！"><a href="#注意事项！！！" class="headerlink" title="注意事项！！！"></a>注意事项！！！</h1><p>一定要在直播期间用Stream Recorder的Normal模式录制全程！</p><p>虽然Streaming+有存档回放功能，但是存档回放Normal模式无法录制全程，只能录制一半，Capture模式下原视频都无法播放，更无法录制了。</p><hr><p>2023-02-28更新</p><p>实测，录制的开始时间是你点进链接的时间。我记错时间，11点07分点进链接，前面7分钟就录不上了。痛！痛！痛！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;少女歌剧revue starlight #4 climax舞台初日！眩しい！&lt;/p&gt;</summary>
    
    
    
    <category term="在坑底招手" scheme="http://strange-id.github.io/categories/%E5%9C%A8%E5%9D%91%E5%BA%95%E6%8B%9B%E6%89%8B/"/>
    
    
    <category term="小技巧" scheme="http://strange-id.github.io/tags/%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>自定义hexo new生成的文章布局</title>
    <link href="http://strange-id.github.io/post/%E8%87%AA%E5%AE%9A%E4%B9%89hexo%20new%E7%94%9F%E6%88%90%E7%9A%84%E6%96%87%E7%AB%A0%E5%B8%83%E5%B1%80.html"/>
    <id>http://strange-id.github.io/post/%E8%87%AA%E5%AE%9A%E4%B9%89hexo%20new%E7%94%9F%E6%88%90%E7%9A%84%E6%96%87%E7%AB%A0%E5%B8%83%E5%B1%80.html</id>
    <published>2023-02-24T11:25:12.000Z</published>
    <updated>2023-07-18T12:31:09.079Z</updated>
    
    <content type="html"><![CDATA[<p>命令行输入”hexo n 文件名”后会自动生成一个.md文件<br>文件开头的布局可以自定义</p><p><img src="https://cdn.jsdelivr.net/gh/strange-id/img@master/202302241927637.png"></p><p>在scaffolds文件夹中有三种布局，默认使用post布局创建新文章<br><img src="https://cdn.jsdelivr.net/gh/strange-id/img@master/202302241929321.png"></p><p>更改post布局即可</p><h2 id="出现其他问题"><a href="#出现其他问题" class="headerlink" title="出现其他问题"></a>出现其他问题</h2><p>报错：</p><p><img src="https://cdn.jsdelivr.net/gh/strange-id/img@master/202302241935305.png"></p><p>本来以为是中文名的问题，改成英文也不行，注释掉作者行就好了。可能是这个主题没有对应的author？或者是因为已经默认设置过了作者名？暂时没找到原因。反正也用不着，不管了。</p><hr><p>2023.7.18</p><p>输入<code>hexo n 本周总结#0 洗牙、理发、混日子</code>后，新建文件的标题是洗牙、理发、混日子，因为<code>#0</code>后面有一个空格，乱了。我以为改了标题就好，又发现它还没有按照<code>post.md</code>文件的格式。以后文章标题还是要记得不能有空格。若有空格，需要把标题用引号括起来。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;命令行输入”hexo n 文件名”后会自动生成一个.md文件&lt;br&gt;文件开头的布局可以自定义&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/strange-id/img@master/202302241927637.png&quot;&gt;&lt;/</summary>
      
    
    
    
    <category term="学习记录" scheme="http://strange-id.github.io/categories/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="小技巧" scheme="http://strange-id.github.io/tags/%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
    <category term="hexo" scheme="http://strange-id.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>配置环境变量</title>
    <link href="http://strange-id.github.io/post/%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F.html"/>
    <id>http://strange-id.github.io/post/%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F.html</id>
    <published>2023-02-24T06:30:13.000Z</published>
    <updated>2023-07-18T12:21:04.966Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><p>此电脑–属性–高级系统设置–环境变量</p>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;
&lt;p&gt;此电脑–属性–高级系统设置–环境变量&lt;/p&gt;
</summary>
      
    
    
    
    <category term="学习记录" scheme="http://strange-id.github.io/categories/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="小技巧" scheme="http://strange-id.github.io/tags/%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>java学习日记（一）</title>
    <link href="http://strange-id.github.io/post/java%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89.html"/>
    <id>http://strange-id.github.io/post/java%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89.html</id>
    <published>2023-02-24T06:16:40.000Z</published>
    <updated>2023-07-18T12:21:16.341Z</updated>
    
    <content type="html"><![CDATA[<h1 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h1><p>安装JDK 19：开发环境。</p><p>官网有三个下载链接：Windows x64 Compressed Archive（免安装版本）、Windows x64 Installer 和 Windows x64 MSI Installer。三者没有什么区别，exe和MSI是两种安装文件（？）。</p><h2 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h2><a href="/post/%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F.html" title="配置环境变量">配置环境变量方法</a><h2 id="vscode插件"><a href="#vscode插件" class="headerlink" title="vscode插件"></a>vscode插件</h2><p>不知道为什么，在我安装了JDK 19、配置好各种全局变量后，下载插件，新建工程报错，说我没有java；<br>数次尝试无果，我放弃使用vscode。</p><h1 id="以上全部作废！！！"><a href="#以上全部作废！！！" class="headerlink" title="以上全部作废！！！"></a>以上全部作废！！！</h1><p>把安装好的卸载掉，解压老师给的压缩包然后重新配置环境变量。</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ol><li>\Java\eclipse里有两个exe文件，但是上面那个打不开，用下面的<br><img src="https://cdn.jsdelivr.net/gh/strange-id/img@master/202302241847102.png"></li><li>更改工作位置</li><li>里面的代码都打不开<br> 因为和老师的存储位置不一样，只要按F5就自动更新位置了。</li></ol><h2 id="第二节课笔记"><a href="#第二节课笔记" class="headerlink" title="第二节课笔记"></a>第二节课笔记</h2><p>见onenote</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;搭建环境&quot;&gt;&lt;a href=&quot;#搭建环境&quot; class=&quot;headerlink&quot; title=&quot;搭建环境&quot;&gt;&lt;/a&gt;搭建环境&lt;/h1&gt;&lt;p&gt;安装JDK 19：开发环境。&lt;/p&gt;
&lt;p&gt;官网有三个下载链接：Windows x64 Compressed Archive</summary>
      
    
    
    
    <category term="学习记录" scheme="http://strange-id.github.io/categories/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="java" scheme="http://strange-id.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>补战姬绝笑时要小心</title>
    <link href="http://strange-id.github.io/post/%E8%A1%A5%E6%88%98%E5%A7%AC%E7%BB%9D%E7%AC%91%E6%97%B6%E8%A6%81%E5%B0%8F%E5%BF%83.html"/>
    <id>http://strange-id.github.io/post/%E8%A1%A5%E6%88%98%E5%A7%AC%E7%BB%9D%E7%AC%91%E6%97%B6%E8%A6%81%E5%B0%8F%E5%BF%83.html</id>
    <published>2023-02-23T14:31:22.000Z</published>
    <updated>2023-07-18T12:21:10.653Z</updated>
    
    <content type="html"><![CDATA[<p>一边听战姬绝笑SYMPHOGEAR广播第二季第40回一边吃开心果，开心果都嚼碎了分布在口腔各处。</p><p>冷笑话环节，两位主持人笑得想死，但我觉得还好，可能是因为文化差异我没怎么听懂。</p><p>唯一听懂了一句“听众名：漏らし（漏尿了）”的时候，和两位同步笑喷，然后就呛开心果了。</p><p>？？？开心果碎屑竟然能呛进鼻子里？？？狂擤鼻子也擤不干净。</p><p>千万不要在听战姬绝笑时进食喝水！<br><img src="https://cdn.jsdelivr.net/gh/strange-id/img@master/202302232241793.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;一边听战姬绝笑SYMPHOGEAR广播第二季第40回一边吃开心果，开心果都嚼碎了分布在口腔各处。&lt;/p&gt;
&lt;p&gt;冷笑话环节，两位主持人笑得想死，但我觉得还好，可能是因为文化差异我没怎么听懂。&lt;/p&gt;
&lt;p&gt;唯一听懂了一句“听众名：漏らし（漏尿了）”的时候，和两位同步笑喷，然</summary>
      
    
    
    
    <category term="日常随记" scheme="http://strange-id.github.io/categories/%E6%97%A5%E5%B8%B8%E9%9A%8F%E8%AE%B0/"/>
    
    
    <category term="战姬绝唱" scheme="http://strange-id.github.io/tags/%E6%88%98%E5%A7%AC%E7%BB%9D%E5%94%B1/"/>
    
  </entry>
  
  <entry>
    <title>hexo博客本地预览和github网页不同</title>
    <link href="http://strange-id.github.io/post/hexo%E5%8D%9A%E5%AE%A2%E6%9C%AC%E5%9C%B0%E9%A2%84%E8%A7%88%E5%92%8Cgithub%E7%BD%91%E9%A1%B5%E4%B8%8D%E5%90%8C.html"/>
    <id>http://strange-id.github.io/post/hexo%E5%8D%9A%E5%AE%A2%E6%9C%AC%E5%9C%B0%E9%A2%84%E8%A7%88%E5%92%8Cgithub%E7%BD%91%E9%A1%B5%E4%B8%8D%E5%90%8C.html</id>
    <published>2023-02-21T08:22:48.000Z</published>
    <updated>2023-02-26T04:35:16.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、问题描述"><a href="#一、问题描述" class="headerlink" title="一、问题描述"></a>一、问题描述</h1><p>修改hexo博客文章标签和分类后，本地预览可以正常显示，上传至github后无法显示</p><h1 id="二、解决方案"><a href="#二、解决方案" class="headerlink" title="二、解决方案"></a>二、解决方案</h1><p>需强制刷新浏览器缓存，Shift+F5刷新，才能显示修改后的新界面</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、问题描述&quot;&gt;&lt;a href=&quot;#一、问题描述&quot; class=&quot;headerlink&quot; title=&quot;一、问题描述&quot;&gt;&lt;/a&gt;一、问题描述&lt;/h1&gt;&lt;p&gt;修改hexo博客文章标签和分类后，本地预览可以正常显示，上传至github后无法显示&lt;/p&gt;
&lt;h1 id=</summary>
      
    
    
    
    <category term="学习记录" scheme="http://strange-id.github.io/categories/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="小技巧" scheme="http://strange-id.github.io/tags/%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
    <category term="hexo" scheme="http://strange-id.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>響hibiki广播录制</title>
    <link href="http://strange-id.github.io/post/%E9%9F%BFhibiki%E5%B9%BF%E6%92%AD%E5%BD%95%E5%88%B6.html"/>
    <id>http://strange-id.github.io/post/%E9%9F%BFhibiki%E5%B9%BF%E6%92%AD%E5%BD%95%E5%88%B6.html</id>
    <published>2023-02-21T07:52:38.000Z</published>
    <updated>2023-07-18T12:20:53.632Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、hibiki广播"><a href="#一、hibiki广播" class="headerlink" title="一、hibiki广播"></a>一、hibiki广播</h1><p><a href="https://hibiki-radio.jp/">广播地址</a></p><p>追女声优就逃不开的广播</p><h1 id="二、问题"><a href="#二、问题" class="headerlink" title="二、问题"></a>二、问题</h1><ol><li>无法直连，需要日本ip、全局模式</li><li>即使拖拽进度条没有卡顿，播放几分钟后也会突然停住，无法录制</li></ol><h1 id="三、解决方案"><a href="#三、解决方案" class="headerlink" title="三、解决方案"></a>三、解决方案</h1><p>使用雷神模拟器，上梯子，在谷歌play商店下载【hibiki radio】app；</p><p>收听广播的ip随意（好神秘）；</p><p>用雷神模拟器自带的录屏功能录制。注意音量大小是有影响的。</p><h1 id="四、视频发布b站"><a href="#四、视频发布b站" class="headerlink" title="四、视频发布b站"></a>四、视频发布b站</h1><p>因为只有声音，可以尽量减小视频大小：</p><ol><li>视频分辨率可以选用附图的尺寸（不用选1980）<br> 在序列设置里改</li><li>目标比特率拉低<br> 比如640*480的视频，目标比特率是0.8就够了</li></ol><hr><h1 id="2023-3-17更新：新的问题和解决方案"><a href="#2023-3-17更新：新的问题和解决方案" class="headerlink" title="2023-3-17更新：新的问题和解决方案"></a>2023-3-17更新：新的问题和解决方案</h1><h2 id="问题1：梯子"><a href="#问题1：梯子" class="headerlink" title="问题1：梯子"></a>问题1：梯子</h2><p>两会期间梯子塌了一段时间，现在手机端和电脑端都已经恢复。但打开雷神模拟器里的梯子软件还是不能使用</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>卸载重装，顺便找到了极光加速器的git仓库：<a href="https://github.com/getaurora/download">下载地址</a></p><h2 id="问题2：app内无法播放"><a href="#问题2：app内无法播放" class="headerlink" title="问题2：app内无法播放"></a>问题2：app内无法播放</h2><p>这是一个我无法理解的问题。点击播放，下方提示：動画の再生中に問題が発生しました。<br>所有广播都听不了。</p><h3 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h3><p>省流：用Microsoft Edge浏览器听<br>解决过程：不知道为什么app听不了，但是查到了为什么chrome浏览器听不了（<br><a href="https://at.sachi-web.com/firefox_hibikiradio_playback-stops.html#toc2">参考链接</a><br>这位博主表示他用火狐浏览器听响社广播只能听1分30秒左右，之后就会卡顿，跟我的症状一模一样嘛！然后他给出了解决方案，但是我用的是chrome，没有找到能直接更改的选项。那干脆换个浏览器不就完事了…换成Micrsoft Edge解决！</p><h2 id="问题3：录制"><a href="#问题3：录制" class="headerlink" title="问题3：录制"></a>问题3：录制</h2><p>Micrsoft Edge里不能用stream recorder录制响社广播（为什么，好崩溃）</p><h3 id="解决方案-2"><a href="#解决方案-2" class="headerlink" title="解决方案"></a>解决方案</h3><p>obs录屏…真是下下策，持续寻找新方案中。</p><hr><h1 id="2023-3-17更新"><a href="#2023-3-17更新" class="headerlink" title="2023-3-17更新"></a>2023-3-17更新</h1><p>卸载hibiki radio，搜索hibiki radio的apk，找到了版本3.0.2，下载，问题解决。无语了。</p><hr><h1 id="2023-4-7更新"><a href="#2023-4-7更新" class="headerlink" title="2023-4-7更新"></a>2023-4-7更新</h1><p>又出现了app内无法播放的问题，卸载重装无法解决。但是发现网页听广播不卡了，Micrsoft Edge里的Stream recorder也能录了</p><h2 id="录制方法"><a href="#录制方法" class="headerlink" title="录制方法"></a>录制方法</h2><p>挂梯日本节点全局模式，Micrsoft Edge里用Stream recorder的捕获模式录制。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、hibiki广播&quot;&gt;&lt;a href=&quot;#一、hibiki广播&quot; class=&quot;headerlink&quot; title=&quot;一、hibiki广播&quot;&gt;&lt;/a&gt;一、hibiki广播&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://hibiki-radio.jp/&quot;&gt;广播地</summary>
      
    
    
    
    <category term="在坑底招手" scheme="http://strange-id.github.io/categories/%E5%9C%A8%E5%9D%91%E5%BA%95%E6%8B%9B%E6%89%8B/"/>
    
    
    <category term="小技巧" scheme="http://strange-id.github.io/tags/%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
</feed>
